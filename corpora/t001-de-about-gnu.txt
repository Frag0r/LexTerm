https://www.gnu.org/gnu/about-gnu.html
Informationen zum GNU-Betriebssystem

    Der Name GNU ist ein rekursives Akronym von GNU’s Not Unix (‚GNU ist nicht Unix‘) und wird [ˈgnuː] ausgesprochen.

[Weitere historische und allgemeine Artikel über GNU.]

GNU wurde von Richard Stallman (RMS) im Jahr 1983 als ein Betriebssystem angekündigt, welches von engagierten Menschen zusammengestellt werden würde, die für die Freiheit aller Softwarenutzer zusammenarbeiten, um ihre Datenverarbeitung kontrollieren zu können. RMS ist auch heute noch der Chief GNUisance.

Das primäre und anhaltende Ziel von GNU ist ein unixoides System anzubieten, das 100 % Freie Software wäre. Nicht 95%ig, nicht 99,5%ig, sondern 100%ig frei. Der Name des Systems, GNU, ist ein rekursives Akronym von GNU’s Not Unix (‚GNU ist Nicht Unix‘) ‑ eine Art, den technischen Ideen von Unix Tribut zu zollen und gleichzeitig zu sagen, dass GNU etwas anderes ist. Technisch gesehen ist GNU wie Unix. Aber im Gegensatz zu Unix gibt GNU seinen Benutzern Freiheit.

Vollständig freie Distributionen, die diesem Ziel entsprechen, stehen heute zur Verfügung, viele mit dem GNU Linux-libre-Betriebssystemkern (die Beziehung zwischen GNU und dem Betriebssystemkern Linux wird an anderer Stelle umfassend beschrieben). Die GNU-Pakete wurden so aufeinander abgestimmt, damit wir ein funktionierendes GNU-System haben konnten. Es hat sich gezeigt, dass sie auch als gemeinsamer Upstream für viele Distributionen dienen, also Beiträge zu GNU-Paketen der Freie-Software-Gemeinschaft als Ganzes helfen. Natürlich ist die Arbeit an GNU noch nicht mit dem Ziel abgeschlossen, ein System zu erstellen, das Rechnernutzern die größtmögliche Freiheit gibt. GNU-Pakete beinhalten benutzerorientierte Anwendungen, Dienstprogramme, Hilfsprogramme, Bibliotheken, sogar Spiele ‑ alle Programme, die ein Betriebssystem seinen Nutzern zweckmäßigerweise anbieten kann. Neue Pakete sind willkommen …

Tausende von Menschen haben sich angeschlossen, um GNU so erfolgreich zu machen wie es heute ist, und es gibt viele Möglichkeiten um mitzuwirken, sowohl technisch als auch nichttechnisch. GNU-Entwickler treffen sich von Zeit zu Zeit auf GNU Hacker Meetings, manchmal als Teil der größeren Freie-Software-Gemeinschaft LibrePlanet-Konferenzen.

GNU wurde auf verschiedene Weise von der Free Software Foundation (FSF) unterstützt, eine ebenfalls von RMS gegründete gemeinnützige Organisation, um für Freie-Software-Ideale einzutreten. Unter anderem akzeptiert die FSF Copyright-Übertragungen und Verzichtserklärungen, damit sie vor Gericht im Namen der GNU-Programme fungieren kann (zur Klarstellung: ein Programm zu GNU beizutragen, erfordert nicht das Copyright an die FSF zu übertragen. Wenn man das Copyright zuweist, wird die FSF die GNU GPL für das Programm durchsetzen, sollte jemand dagegen zuwider handeln; behält man das Copyright, liegt die Durchsetzung bei Ihnen.)

Das endgültige Ziel ist Freie Software bereitzustellen, damit Rechnernutzer alle Aufgaben erledigen können, die sie möchten ‑ und so proprietäre Software zu einer Sache der Vergangenheit zu machen.


https://www.gnu.org/gnu/gnu-history.html
Geschichte des GNU-Systems

Das Betriebssystem GNU ist ein vollständig freies Softwaresystem und aufwärtskompatibel mit Unix. GNU steht für GNU’s Not Unix (‚GNU ist Nicht Unix‘) und wird [ˈgnuː] ausgesprochen. Richard Stallman machte im September 1983 die Ursprüngliche Ankündigung des GNU-Projekts. Im März 1985 wurde eine längere Fassung, das GNU-Manifest, veröffentlicht. Es ist mehrsprachig übersetzt worden.

Der Name GNU wurde gewählt, weil er einiger Belange erfüllte: erstens war es ein rekursives Akronym für GNU's Not Unix, zweitens, weil es ein tatsächlich vorkommendes Wort war, und drittens, es machte Spaß es auszusprechen (oder zu singen).

Das Wort Freie in Freie Software bezieht sich auf Freiheit, nicht den Preis. Man kann einen Preis dafür bezahlen (oder auch nicht), um GNU-Software zu erhalten. So oder so, sobald man die Software besitzt, werden vier konkrete Freiheiten zur Nutzung gewährt. Die Freiheit, das Programm auszuführen wie man möchte. Die Freiheit, das Programm zu vervielfältigen und an Freunde und Kollegen weiter zu geben. Die Freiheit, das Programm nach eigenen Wünschen zu ändern, durch uneingeschränkten Zugang zum Quellcode. Die Freiheit, eine verbesserte Version zu verbreiten und damit beim Aufbau der Gemeinschaft zu helfen (wenn man GNU-Software weiterverbreitet, kann man ein Entgelt für den physischen Akt der Weitergabe einer Kopie berechnen oder Kopien verschenken).

Das Projekt zur Entwicklung des GNU-Systems wird als das GNU-Projekt bezeichnet. Das GNU-Projekt entstand im Jahr 1983 als eine Möglichkeit, den zusammenarbeitenden Geist zurückzubringen, der in früheren Tagen in der Rechnerwelt vorherrschte ‑ um von Eigentümern proprietärer Software auferlegte Hindernisse zu beseitigen, die die Zusammenarbeit verhinderten und dadurch die Zusammenarbeit wieder möglich werden zu lassen.

Im Jahr 1971, als Richard Stallman seine Karriere am Massachusetts Institute of Technology (MIT) begann, arbeitete er in einer Gruppe, die ausschließlich Freie Software nutzte. Selbst Rechnerfirmen verbreiteten oft freie Software. Programmierer konnten jederzeit miteinander zusammenarbeiten ‑ und taten es häufig.

Bis zu den 1980ern war fast die gesamte Software proprietär, d. h. sie hatte Eigentümer, die die Zusammenarbeit von Nutzern verbieten und verhindern. Dies machte das GNU-Projekt notwendig.

Jeder Rechnernutzer braucht ein Betriebssystem; gibt es kein freies Betriebssystem, dann können Rechner noch nicht einmal ohne proprietäre Software gestartet werden. Also musste der erste auf der Freie-Software-Agenda stehende Punkt offensichtlich der eines freien Betriebssystems sein.

Wir beschlossen, das Betriebssystem mit Unix kompatibel zu machen, weil das Gesamtkonzept bereits bewährt und portierbar war und weil Kompatibilität es für Unix-Benutzer leichter macht, von Unix auf GNU umzusteigen.

Ein unixoides Betriebssystem enthält einen Betriebssystemkern, Compiler, Editoren, Textverarbeitungen, E-Mail-Software, grafische Oberflächen, Bibliotheken, Spiele und vieles andere mehr. Folglich ist das Schreiben eines ganzen Betriebssystems eine sehr große Aufgabe. Wir begannen im Januar 1984. Im Oktober 1985 wurde die Free Software Foundation (FSF) gegründet, um anfangs Gelder zur Entwicklung von GNU zu beschaffen.

Bis 1990 hatten wir entweder die wichtigsten Komponenten gefunden oder geschrieben, mit einer Ausnahme ‑ dem Betriebssystemkern. Dann wurde von Linus Torvalds im Jahr 1991 Linux, ein unixoider Betriebssystemkern, entwickelt, und 1992 Freie Software. Die Kombination von Linux mit dem beinahe kompletten GNU-System führte zu einem vollständigen Betriebssystem: GNU/Linux. Schätzungen zufolge nutzen heute zig Millionen Menschen GNU/Linux-Systeme, typischerweise über GNU/Linux-Distributionen. Heute umfasst die Hauptversion von Linux unfreie Firmware-BLOBs; Freie-Software-Aktivisten pflegen inzwischen eine modifizierte Variante namens GNU Linux-libre.

Allerdings ist das GNU-Projekt nicht nur auf das Kern-Betriebssystem beschränkt. Ziel ist eine breite Softwareauswahl ‑ was auch immer von Nutzern gewünscht wird ‑ bereitzustellen. Siehe das Free Software Directory für ein Verzeichnis von freien Softwareanwendungsprogrammen.

Wir möchten auch Software für Nutzer bereitstellen, die keine Rechnerexperten sind. Deshalb wurde eine grafische Arbeitsumgebung entwickelt (namens GNOME[1]), um Einsteigern die Nutzung des GNU-Systems zu erleichtern.

Ebenso möchten wir Spiele und anderes Vergnügliches anbieten. Eine Menge freie Spiele sind bereits verfügbar.

Wie weit kann Freie Software gehen? Es gibt keine Grenzen ‑ es sei denn Gesetze wie das Patentsystem verbieten Freie Software! Das ultimative Ziel ist Freie Software für alle Aufgaben bereitzustellen, die Rechnernutzer erledigen möchten ‑ und damit proprietäre Software überflüssig zu machen.


https://www.gnu.org/gnu/thegnuproject.html
Über das Projekt ‚GNU‘

von Richard Stallman

    Die englische Originalausgabe wurde in dem Buch Open Sources veröffentlicht. Richard Stallman war nie ein Anhänger von „Open Source“;, trug aber diesen Artikel bei, damit die Anschauungen der Freie-Software-Bewegung nicht völlig fehlen würden.

    Bitte beachten Sie auch den Aufsatz Freie Software ist jetzt sogar noch wichtiger denn je, denn wir sollten auf Software ‑ Software die wir nutzen! ‑ bestehen, die frei ist.

Die erste Software-teilende Gemeinschaft

Als ich 1971 am Artificial Intelligence Laboratory (AI Lab) des Massachusetts Institute of Technology anfing zu arbeiten, wurde ich Teil einer Software-teilenden Gemeinschaft, die schon seit Jahren existierte. Die gemeinsame Nutzung von Software war nicht nur auf unsere besondere Gemeinschaft beschränkt; sie ist so alt wie Rechner selbst, genauso wie der Austausch von Kochrezepten so alt wie das Kochen ist. Aber wir praktizierten es mehr als die meisten.

Das AI Lab verwendete ein Mehrbenutzer-Betriebssystem namens Incompatible Timesharing System (ITS), welches die Hacker(1) des Laborpersonals in der Programmiersprache Assembler für den Digital PDP-10, einen der großen Rechner dieser Ära, entworfen und geschrieben hatten. Als Mitglied dieser Gemeinschaft, ein angestellter Systemhacker des AI Labs, war es meine Aufgabe dieses System zu verbessern.

Wir nannten unsere Software nicht Freie Software, da dieser Ausdruck noch nicht geprägt war, aber das ist es, was sie war. Wann immer jemand von einer anderen Universität oder einer Firma ein Programm portieren und benutzen wollte, freute uns das und wir ließen sie gewähren. Wenn man jemanden ein unbekanntes interessantes Programm benutzen sah, konnte man immer den Quellcode bekommen, sodass man diesen lesen, verändern oder sogar Teile davon für neue Programme ausschlachten konnte.

Der Zusammenbruch der Gemeinschaft

Die Situation änderte sich Anfang der 80er Jahre drastisch, als Digital die PDP-10-Serie einstellte. Ihre Architektur, elegant und leistungsfähig in den 60ern, konnte natürlich nicht auf größere Adressräume erweitert werden, welche in den 80ern möglich wurden. Das bedeutete, dass nahezu alle im ITS zusammengesetzten Programme veraltet waren.

Die Hacker-Gemeinschaft des AI Labs war bereits kurz vorher zusammengebrochen. Im Jahr 1981 hatte das ausgegliederte Unternehmen Symbolics fast alle Hacker aus dem AI Lab abgeworben, und die entvölkerte Gemeinschaft war außerstande, sich zu behaupten (das Buch Hackers von Steve Levy beschreibt diese Ereignisse sowie ein klares Bild dieser Gemeinschaft in ihrer Blütezeit). Als das AI Lab 1982 einen neuen PDP-10 kaufte, entschieden dessen Administratoren, Digitals unfreies Mehrbenutzer-Betriebssystem anstatt ITS zu benutzen.

Die modernen Rechner dieser Ära, wie der VAX oder der 68020, hatten eigene Betriebssysteme, aber keines war freie Software: man musste sogar eine Vertraulichkeitsvereinbarung unterzeichnen, nur um eine ausführbare Kopie zu erhalten.

Das bedeutete, dass der erste Schritt zur Benutzung eines Rechners darin bestand zu versprechen, seinen Nächsten nicht zu helfen. Eine zusammenarbeitende Gemeinschaft war verboten. Die Vorschrift von Eigentümern proprietärer Software war: „Wenn Sie mit ihrem Nächsten teilen, sind Sie ein Softwarepirat. Möchten Sie irgendwelche Änderungen, bitten Sie uns, diese vorzunehmen.“

Die Idee, dass das proprietäre Software-Sozialsystem ‑ das System, was besagt, man sei nicht berechtigt Software zu teilen oder zu verändern ‑ unsozial, unethisch und einfach falsch ist, mag einige überraschen. Aber was könnten wir sonst über ein System sagen, was darauf basiert die Allgemeinheit zu spalten und Nutzer hilflos zu halten? Leserinnen und Leser, die diesen Gedanken überraschend finden, haben das proprietäre Software-Sozialsystem möglicherweise als gegeben angesehen oder es unter den von den proprietären Softwareunternehmen vorgeschlagenen Begriffen beurteilt. Softwarehersteller haben lange und hart daran gearbeitet Menschen davon zu überzeugen, es gäbe nur einen Blickwinkel auf dieses Problem.

Wenn Softwarehersteller über „Durchsetzung“ ihrer „Rechte“ oder Verhinderung von „Softwarepiraterie“ sprechen, ist das, was sie wirklich meinen, zweitrangig. Die eigentliche Botschaft dieser Aussagen ist die unausgesprochene, für selbstverständlich gehaltene Annahme, die Öffentlichkeit aufzufordern, diese ungeprüft zu akzeptieren. Betrachten wir sie deshalb etwas näher.

Eine Annahme ist, dass Softwareunternehmen ein unbestreitbares natürliches Recht auf eigene Software und damit Macht über alle ihre Benutzer haben (wenn dies ein natürliches Recht wäre, ganz gleich wie viel Schaden es für die Öffentlichkeit bedeutet, könnten wir nichts dagegen machen). Interessanterweise lehnen die US-Verfassung und rechtliche Traditionen diese Auffassung ab. Urheberrecht ist kein natürliches Recht, sondern ein vom Staat künstlich auferlegtes Monopol, das Benutzern das natürliche Recht zu kopieren eingrenzt.

Eine weitere unausgesprochene Annahme ist, dass es bei Software nur wichtig ist, welche Aufgaben sie einem erlaubt auszuführen ‑ das wir Rechnernutzer uns nicht darum kümmern sollten, was für eine Gesellschaft wir haben dürfen.

Eine dritte Annahme ist, dass wir keine brauchbare Software haben würden (oder niemals ein Programm haben würden, um die eine oder andere Aufgabe zu erledigen), wenn wir einem Unternehmen nicht die Macht über die Benutzer des Programms geben würden. Diese Annahme mag ganz plausibel gewesen sein, bevor die Freie-Software-Bewegung gezeigt hat, dass wir eine Menge nützlicher Software entwickeln können, ohne sie an Ketten zu legen.

Wenn wir diese Annahmen ablehnen zu akzeptieren und diese Probleme auf Grundlage des gesunden Menschenverstandes moralisch ‑ Benutzerinnen und Benutzer an erster Stelle ‑ beurteilen, kommen wir zu ganz anderen Schlussfolgerungen. Rechnernutzer sollten Programme entsprechend ihren Bedürfnissen anpassen und mit anderen teilen können, denn anderen Menschen zu helfen ist die Grundlage der Gesellschaft.

Es würde den Rahmen dieses Dokuments sprengen, die Gründe für diese Schlussfolgerung ausführlich darzulegen, möchte aber auf die Artikel Warum Software keine Eigentümer haben sollte und Freie Software ist jetzt sogar noch wichtiger verweisen.
Eine gänzlich moralische Entscheidung

Mit dem Verlust meiner Gemeinschaft war es unmöglich weiterzumachen wie zuvor. Stattdessen stand ich vor einer gänzlich moralischen Entscheidung.

Die einfachste Entscheidung wäre wohl gewesen, der proprietären Softwarewelt beizutreten, Vertraulichkeitsvereinbarungen zu unterzeichnen und zu versprechen, meinen Mithackern nicht mehr zu helfen. Sehr wahrscheinlich würde ich auch Software entwickeln, die unter Vertraulichkeitsvereinbarungen freigegeben wäre und somit den Druck auf andere Menschen erhöhen, ihre Mitmenschen auch zu verraten.

Ich hätte auf diese Weise Geld gemacht und mich vielleicht mit dem Schreiben von Quellcode vergnügen können. Aber ich wusste, dass ich am Ende meiner Karriere auf Jahre des Mauerbauens, um Menschen zu spalten, zurückblicken und das Gefühl haben würde, mein Leben damit verbracht zu haben, die Welt zu einem noch schlimmeren Ort gemacht zu haben.

Ich hatte bereits Erfahrung damit, am empfangenden Ende einer Vertraulichkeitsvereinbarung zu sein, als sich jemand weigerte, mir und dem MIT AI Lab den Quellcode für das Steuerprogramm unseres Druckers zu geben (der Mangel bestimmter Fähigkeiten in diesem Programm machte den Gebrauch des Druckers äußerst frustrierend). Also konnte ich mir selbst nicht mehr sagen, dass Vertraulichkeitsvereinbarungen unschuldig waren. Ich war sehr verärgert, als er sich weigerte mit uns zu teilen. Ich konnte mich nicht einfach umdrehen und dasselbe mit anderen machen.

Eine andere Alternative, einfach aber unangenehm, war der Rechnerwelt den Rücken zukehren. Auf diese Weise würden meine Kenntnisse nicht missbräuchlich genutzt werden, aber dennoch verschwendet. Ich wäre zwar nicht Schuld an der Spaltung und Beschränkung von Rechnernutzern, aber es würde dennoch passieren.

Also suchte ich nach einem Weg, auf dem ein Programmierer etwas Gutes bewirken kann. Ich fragte mich, ob es ein Programm oder Programme gab, das oder die ich schreiben könnte, um so noch einmal eine Gemeinschaft möglich zu machen.

Die Antwort war klar: was zuerst erforderlich war, war ein Betriebssystem. Das ist die entscheidende Software, um anzufangen, einen Rechner zu benutzen. Mit einem Betriebssystem kann man viele Dinge machen, ohne kann man den Rechner überhaupt nicht benutzen. Mit einem freien Betriebssystem könnten wir wieder eine Gemeinschaft von zusammenarbeitenden Hackern haben ‑ und jeden einladen, sich uns anzuschließen. Und jedermann wäre in der Lage einen Rechner zu benutzen, ohne auf verschwörerische Weise zu beginnen seine oder ihre Freunde zu benachteiligen.

Als Betriebssystementwickler hatte ich die richtigen Kenntnisse für diese Aufgabe. Auch wenn ich den Erfolg nicht als garantiert ansehen konnte, wurde mir klar, dass ich auserwählt war diese Aufgabe zu übernehmen. Ich entschied mich das System mit Unix kompatibel zu machen, damit es portabel wäre und Unix-Benutzer somit leichter umsteigen könnten. Der Name GNU wurde, einer Hacker-Tradition folgend, als ein rekursives Akronym für GNU’s Not Unix (‚GNU ist nicht Unix‘) gewählt und wird [ˈgnuː] ausgesprochen.

Ein Betriebssystem bedeutet nicht nur einen Betriebssystemkern ‑ kaum genug, um andere Programme auszuführen. In den 1970ern umfasste jedes Betriebssystem, das diesen Namen verdiente, Befehlsinterpreter, Assembler, Compiler, Interpreter, Debugger, Texteditoren, E-Mail-Anwendungen und vieles mehr. ITS, Multics, VMS und Unix hatten sie. Das GNU-Betriebssystem würde sie auch umfassen.

Später hörte ich diese Wörter, zurückgeführt auf Hillel[2]:

    „Wenn ich nicht für mich bin, wer wird für mich sein?
    Wenn ich nur für mich bin, was bin ich dann?
    Wenn nicht jetzt, wann?“ 

Der Entschluss, mit dem GNU-Projekt zu beginnen, beruhte auf einem ähnlichen Geist.

Frei wie in Freiheit

Der Begriff Freie Software wird mitunter missverstanden ‑ er hat nichts mit dem Preis zu tun. Es geht um Freiheit. Hier deshalb die Freie-Software-Definition.

Ein Programm ist Freie Software, für Sie, einem besonderen Benutzer, wenn:

    Sie die Freiheit haben, das Programm auszuführen wie Sie möchten, für jeden Zweck;
    Sie die Freiheit haben, das Programm an Ihre Bedürfnisse anzupassen (um diese Freiheit in der Praxis umzusetzen, muss man Zugang zum Quellcode haben, denn Programmänderungen ohne Quellcode sind außerordentlich schwierig);
    Sie die Freiheit haben, Kopien weiterzuverbreiten, entweder gratis oder gegen eine Gebühr;
    Sie die Freiheit haben, modifizierte Programmversionen zu distribuieren, damit die Gemeinschaft von Ihren Verbesserungen profitieren kann.

Da sich frei auf Freiheit bezieht, nicht auf den Preis, gibt es keinen Widerspruch zwischen Freie Software und dem Verkauf von Kopien. Tatsächlich ist die Freiheit, Kopien zu verkaufen, entscheidend: Sammlungen von auf CD-ROMs verkaufter freier Software sind für die Gemeinschaft wichtig und der Verkauf ein wichtiger Weg, um mehr in die Freie-Software-Entwicklung zu investieren. Daher ist ein Programm, das man diesen Sammlungen nicht frei aufnehmen kann, keine freie Software.

Aufgrund der Mehrdeutigkeit von frei hat man lange nach Alternativen gesucht, aber niemand hat einen besseren Begriff gefunden. Die englische Sprache hat mehr Wörter und Nuancen als jede andere, aber es fehlt ein einfaches, eindeutiges Wort, das frei wie in Freiheit bedeutet ‑ uneingeschränkt ist ein Wort, das dieser Bedeutung am nächsten kommt. Derartige Alternativen wie befreit, Freiheit und offen haben entweder die falsche Bedeutung oder einen anderen Nachteil.
GNU-Software und das GNU-System

Die Entwicklung eines ganzen Systems ist ein sehr großes Projekt. Um es erreichbar zu machen, beschloss ich, vorhandene Teile freier Software anzupassen und zu nutzen, wo immer das möglich war. Beispielsweise entschied ich mich gleich am Anfang hauptsächlich TeX als Textsatzsystem zu nutzen; einige Jahre später beschloss ich, das X Window System (X11) zu nutzen, anstatt ein anderes Fenstersystem für GNU zu schreiben.

Aufgrund dieser (und anderer ähnlicher) Entscheidungen ist das GNU-System nicht das Gleiche wie die Sammlung aller GNU-Software. Das GNU-System umfasst Programme, die nicht GNU-Software sind, Programme, die von anderen Personen und Projekten für deren eigene Zwecke entwickelt wurden ‑ aber die wir verwenden können, weil sie freie Software sind.
Der Anfang des Projekts

Im Januar 1984 kündigte ich meinen Job am MIT und begann GNU-Software zu schreiben. Das MIT zu verlassen war notwendig, damit es nicht in der Lage gewesen wäre, sich in den Vertrieb von GNU als freie Software einzumischen. Wäre ich als Mitarbeiter geblieben, hätte das MIT Anspruch auf die Arbeit selbst erheben, eigene Vertriebsbedingungen festlegen oder die Arbeit sogar in ein proprietäres Softwarepaket umwandeln können. Ich hatte nicht die Absicht eine Menge Arbeit zu erledigen, um dann zu sehen, wie sie für den eigentlichen Zweck nutzlos wird: das Schaffen einer neuen Software teilenden Gemeinschaft.

Allerdings lud mich Professor Winston, der damalige Leiter des MIT AI Lab, freundlicherweise ein, weiterhin die Einrichtung des Labors zu nutzen.
Die ersten Schritte

Kurz vor Beginn des GNU-Projekts hörte ich vom Free University Compiler Kit, auch als VUCK bekannt (das niederländische Wort für frei fängt mit einem ‚v‘, für ‚vrij‘, an). Das war ein Compiler, entwickelt, um mehrere Programmiersprachen, darunter C und Pascal, zu verarbeiten und mehrere Zielplattformen zu unterstützten. Ich schrieb dem Autor und fragte, ob das Programm für GNU genutzt werden könne.

Er antwortete spöttisch und gab an, dass die Universität frei wäre, nicht aber der Compiler. Ich beschloss daher, dass mein erstes Programm für das GNU-Projekt ein mehrsprachiger, plattformübergreifender Compiler sein würde.

In der Hoffnung, nicht notwendigerweise den ganzen Compiler selbst neu schreiben zu müssen, erhielt ich schließlich den Quellcode des Pastel Compilers, einem plattformübergreifenden Compiler, der am Lawrence Livermore Laboratory entwickelt wurde. Er unterstützte nicht nur eine erweiterte Version von Pascal, sondern war auch in dieser als Systemprogrammiersprache geschrieben. Ich fügte ein C-Frontend hinzu und begann die Portierung auf den Motorola 68000-Rechner. Als ich entdeckte, dass der Compiler mehrere Megabyte Stack-Speicher benötigte und das verfügbare 68000 Unix-System nur 64k erlauben würde, musste ich allerdings aufgeben.

Dann fand ich heraus, dass der Pastel Compiler die gesamte Eingabedatei durch Analyse in einen Syntaxbaum umwandelte, den gesamten Syntaxbaum in eine Kette von Anweisungen umwandelte und dann die ganze Ausgabedatei generierte, ohne jemals irgendwelchen Speicher wieder freizugeben. An diesem Punkt entschloss ich mich, einen neuen Compiler von Grund auf neu zu schreiben. Dieser neue Compiler ist heute als GNU Compiler Collection (GCC) bekannt. Nichts vom Pastel Compiler wurde darin genutzt, aber ich schaffte es, das C-Frontend, welches ich geschrieben hatte, anzupassen und zu nutzen. Aber das war erst einige Jahre später, zuerst arbeitete ich an GNU Emacs.
GNU Emacs

Ich begann die Arbeit an GNU Emacs im September 1984, Anfang 1985 fing er an brauchbar zu werden. Das ermöglichte mir für das weitere Schreiben Unix-Systeme zu nutzen. Kein Interesse habend die Verwendung von Vi oder Ed zu erlernen, hatte ich meine Bearbeitung bis dahin auf anderen Rechnern erledigt.

Zu diesem Zeitpunkt begann man GNU Emacs nutzen zu wollen, was die Frage aufwarf, wie der Vertrieb aussehen sollte. Natürlich war er von einem anonymen FTP-Server des MIT, den ich nutzte, abrufbar (dieser Rechner, prep.ia.mit.edu, wurde daher zur wichtigsten FTP-Vertriebsseite von GNU. Als er ein paar Jahre später stillgelegt wurde, transferierten wir den Namen auf unseren neuen FTP-Server). Aber damals hatten viele Interessierte noch keinen Internetzugang und konnten keine Kopie per FTP abrufen. Also stellte sich die Frage, was ich ihnen sagen würde.

Ich hätte sagen können: „Finden Sie einen Freund, der im Netz ist und eine Kopie für Sie machen kann.“ Oder ich hätte gemacht, was ich mit dem ursprünglichen PDP-10 Emacs praktizierte: „Übersenden Sie mir ein Magnetband mit einem adressierten und frankierten Rückumschlag, und ich sende es mit Emacs darauf zurück.“ Aber ich hatte keine Anstellung und suchte nach Wegen, mit freier Software Geld zu verdienen. Also kündigte ich an, jedem gegen eine Gebühr von 150 US-Dollar ein Magnetband zu senden. Auf diese Weise begann ich einen geschäftlichen Vertrieb mit freier Software, dem Vorläufer der Unternehmen, die heute ganze GNU/Linux-Distributionen verbreiten.
Ist ein Programm für jeden Benutzer frei?

Wenn ein Programm, wenn es die Hände des Autors verlässt, Freie Software ist, bedeutet dies nicht notwendigerweise, dass es für jedermann freie Software sein wird, die eine Kopie davon besitzen. Beispielsweise ist Public-Domain-Software (Software, die nicht dem Urheberrecht unterliegt)[*] Freie Software, aber jeder kann eine proprietäre modifizierte Version davon erstellen. Ebenfalls sind viele freie Programme mit einem Copyright versehen, aber unter einfachen freizügigen Lizenzen, die proprietäre modifizierte Versionen ermöglichen.

Das paradigmatische Beispiel dieses Problems ist das X Window System (X11). Am MIT entwickelt und als Freie Software mit einer freizügigen Lizenz freigegeben, wurde es bald von verschiedenen Rechnerfirmen adaptiert. Sie fügten X11 nur in binärer Form ihren proprietären Unix-Systemen hinzu ‑ mit einer Vertraulichkeitsvereinbarung. Diese X11-Kopien waren wie Unix keine freie Software mehr.

Die Entwickler von X11 betrachteten dies nicht als ein Problem ‑ sie erwarteten und beabsichtigten es sogar. Ziel war nicht Freiheit, nur Erfolg, definiert als viele Benutzer habend. Es kümmerte nicht, ob diese Freiheit hatten, sie sollten nur zahlreich sein.

Das führte zu einer paradoxen Situation, in der zwei unterschiedliche Sichtweisen, das Maß an Freiheit zu messen, verschiedene Antworten auf die Frage ergaben, „Ist das Programm frei?“ Würde man Freiheit nach den Vertriebsbedingungen des MIT beurteilen, würde man sagen, dass X11 freie Software war. Aber gemessen an der Freiheit des durchschnittlichen X11-Benutzer müsste man sagen, es war proprietäre Software. Die meisten X11-Benutzer führten die proprietären Versionen aus, die mit unfreien Unix-Systemen kamen, nicht die freie Version.
Copyleft und die GNU GPL

Das Ziel von GNU war den Benutzern Freiheit zu geben, nicht nur beliebt zu sein. Also mussten wir Vertriebsbedingungen verwenden, die verhindern würden, GNU-Software in proprietäre Software umzuwandeln. Die Methode, die wir verwenden, wird Copyleft genannt.(3)

Copyleft nutzt das Urheberrecht, aber wendet es auf gegenteilige Weise des üblichen Zwecks an: statt einem Mittel zur Beschränkung eines Programms wird es zu einem Mittel, damit das Programm frei bleibt.

Der Kerngedanke von Copyleft ist, jedem die Berechtigung zu geben, das Programm ausführen, kopieren, modifizieren und modifizierte Versionen verbreiten zu dürfen ‑ aber nicht die Berechtigung Beschränkungen hinzuzufügen. Damit werden entscheidende Freiheiten, die Freie Software definieren, an jedermann garantiert, wer eine Kopie besitzt. Sie werden unveräußerliche Rechte.

Für ein effektives Copyleft müssen modifizierte Versionen ebenfalls frei sein. Dadurch wird sichergestellt, dass das abgeleitete Werk unserer Gemeinschaft verfügbar wird, wenn es veröffentlicht wird. Wenn Programmierer, die als solche arbeiten, freiwillig GNU-Software verbessern, ist es das Copyleft, was ihre Arbeitgeber davon abhält zu sagen: „Sie können diese Änderungen nicht mit anderen austauschen, weil wir sie nutzen werden, um unsere proprietäre Version des Programms daraus zu machen.“

Die Anforderung, das Änderungen frei sein müssen, ist unerlässlich, wenn wir Freiheit für jeden Programmnutzer gewähren wollen. Die Unternehmen, die X11 privatisiert haben, machten für gewöhnlich einige Änderungen, um es auf ihre Systeme und ihre Hardware zu portieren. Diese Änderungen waren im Vergleich mit dem großen Umfang von X11 gering, aber sie waren nicht trivial. Wenn gemachte Änderungen Vorwand wären, um den Nutzern Freiheit zu versagen, wäre es für jedermann einfach, die Vorteile als Vorwand auszunutzen.

Ein ähnliches Problem betrifft die Kombination eines freien Programms mit unfreiem Quellcode. Solch eine Kombination wäre zwangsläufig unfrei! Welche Freiheiten auch immer dem unfreien Teil fehlt, würde dem Ganzen auch fehlen. Solche Kombinationen zu erlauben, würde ein Loch öffnen, groß genug, um ein Schiff darin zu versenken. Daher ist eine unabdingbare Anforderung für Copyleft, dieses Loch zu stopfen: etwas einem mit Copyleft versehenem Programm hinzuzufügen oder zu kombinieren muss so erfolgen, dass die daraus größere kombinierte Version ebenfalls frei und mit Copyleft ist.

Die konkrete Umsetzung des Copyleft, die wir für die meiste GNU-Software verwenden, ist die GNU General Public License, kurz GNU GPL. Wir haben auch noch andere Arten des Copyleft, die unter bestimmten Umständen verwendet werden. GNU-Handbücher sind ebenfalls mit Copyleft versehen, verwenden aber ein viel einfacheres Copyleft, weil die Komplexität der GNU GPL für Handbücher nicht notwendig ist.(4)

Free Software Foundation

Da das Interesse an der Nutzung von Emacs wuchs, andere Personen am GNU-Projekt beteiligt wurden und wir beschlossen, dass es Zeit war erneut nach finanziellen Mitteln zu suchen, schufen wir 1985 die Free Software Foundation (FSF), eine gemeinnützige Stiftung für die Freie-Software-Förderung und -Entwicklung. Die FSF übernahm auch das Vertriebsgeschäft der Emacs-Magnetbänder. Später wurde dies durch Hinzufügen weiterer freier Software zum Magnetband (sowohl GNU als auch GNU-fremder) und natürlich durch den Verkauf freier Handbücher erweitert.

Der größte Teil der Einnahmen der FSF kam aus den Verkäufen von Kopien freier Software und anderen damit zusammenhängenden Diensten (CD-ROMs mit Quellcode oder Binärdateien, schön gedruckten Handbüchern, alle mit der Freiheit weitergegeben und modifiziert zu werden) und Deluxe-Distributionen (in denen wir eine ganze Softwaresammlung nach Wahl des Kunden je nach Plattform zusammenstellten). Noch heute vertreibt die FSF Handbücher und andere Utensilien, erhält aber den Großteil ihrer Mittel aus Mitgliedsbeiträgen. Sie können der FSF unter FSF.org beitreten.

Mitarbeiter der Free Software Foundation haben eine Reihe von GNU-Softwarepaketen geschrieben und betreut. Zwei beachtenswerte sind die C-Bibliothek und die Eingabeaufforderung. Die GNU C-Bibliothek wird von jedem auf einem GNU/Linux-System ausgeführten Programm genutzt, um mit Linux zu kommunizieren. Sie wurde von einem Mitarbeiter der Free Software Foundation, Roland McGrath, entwickelt. Der auf den meisten GNU/Linux-Systemen genutzte Befehlszeileninterpreter ist Bourne Again Shell (BASH)[5], entwickelt von Brian Fox, einem FSF-Mitarbeiter.

Wir finanzierten die Entwicklung dieser Programme, weil es beim GNU-Projekt nicht nur um Dienstprogramme oder eine Entwicklungsumgebung ging. Unser Ziel war ein vollständiges Betriebssystem, und diese Programme waren für dieses Ziel erforderlich.

Freie-Software-Unterstützung

Die Freie-Software-Philosophie lehnt eine bestimmte weitverbreitete Geschäftspraxis ab, aber ist nicht gegen das Geschäft. Wenn Geschäfte die Freiheit der Nutzer respektieren, wünschen wir ihnen Erfolg.

Der Verkauf von Emacs-Kopien veranschaulicht eine Art von Freie-Software-Geschäft. Als die FSF dieses Geschäft übernahm, brauchte ich einen anderen Weg, um meinen Lebensunterhalt zu bestreiten. Ich fand ihn im Anbieten von Dienstleistungen in Zusammenhang mit der freien Software, die ich entwickelt hatte. Dies beinhaltete die Unterweisung zu Themen wie man beispielsweise GNU Emacs programmiert und GCC anpasst und Softwareentwicklung, hauptsächlich das Portieren von GCC auf neue Plattformen.

Heutzutage wird jede Art von Freie-Software-Geschäft von einer Reihe von Unternehmen praktiziert. Einige vertreiben Freie-Software-Sammlungen auf CD-ROM. Andere bieten Unterstützung, angefangen mit der Beantwortung von Benutzerfragen, Beseitigung von Programmfehlern, Hinzufügen neuer Programmfunktionen. Wir fangen sogar an Freie-Software-Unternehmen zu sehen, die aufgrund neuer Freie-Software-Produkte gegründet werden.

Passen Sie dennoch auf: Obwohl es eine Reihe von Unternehmen gibt, die sich dem Begriff „Open Source“ verbunden fühlen, basiert ihr Geschäft tatsächlich auf unfreier Software, die mit freier Software arbeitet. Das sind keine Freie-Software-Unternehmen, sondern proprietäre Softwareunternehmen, deren Produkte Benutzer von Freiheit weg in Versuchung führen. Sie nennen diese Programme Mehrwertpakete, die die Werte widerspiegeln, die sie gerne als von uns adaptiert sehen würden: Nutzen über Freiheit. Wenn wir Freiheit höher schätzen, sollten sie freiheitsentziehende Pakete genannt werden.
Technische Ziele

Das primäre Ziel von GNU soll Freie Software sein. Selbst wenn GNU keinen technischen Vorteil gegenüber Unix hätte, gäbe es einen sozialen Vorteil, der Nutzern erlaubt zusammenzuarbeiten, und einen ethischen Vorteil, der die Freiheit des Nutzers respektiert.

Aber es war selbstverständlich, die bekannten Standards guter Praxis auf die Arbeit anzuwenden ‑ etwa die dynamische Zuweisung von Datenstrukturen, um willkürliche feste Größenbegrenzungen zu vermeiden, und die Handhabung aller möglichen 8-Bit-Codes, wann immer das Sinn macht.

Darüber hinaus lehnten wir den Unix-Fokus auf kleine Speichergrößen ab und entschieden, 16-Bit-Rechner nicht zu unterstützen (es war klar, dass 32-Bit-Rechner Standard sind, wenn das GNU-System fertig wäre) und keine Anstrengungen zu machen die Speichernutzung zu verringern, wenn es einen Megabyte überstieg. In Programmen, für die die Behandlung von großen Dateien nicht entscheidend war, ermutigten wir Programmierer die gesamte Eingabedatei in den Prozessorkern einzulesen, dann seinen Inhalt zu überprüfen, ohne sich um Ein- und Ausgabe kümmern zu müssen.

Diese Entscheidungen ermöglichten vielen GNU-Programmen, ihre Unix-Gegenstücke in Zuverlässigkeit und Geschwindigkeit zu übertreffen.
Gespendete Rechner

Als der Ruf des GNU-Projekts wuchs, begann man Rechner als Spende für das Projekt anzubieten, die unter Unix liefen. Diese waren sehr nützlich, weil der einfachste Weg, die Entwicklung von GNU-Komponenten auf einem Unix-System zu tun, und dessen Komponenten eins nach dem anderen zu ersetzen ‑ eine nach der anderen. Aber das löste eine ethische Frage aus: ob es für uns richtig war, überhaupt eine Kopie von Unix zu besitzen.

Unix war (und ist) proprietäre Software, und die Philosophie des GNU-Projekts besagt, dass wir keine proprietäre Software nutzen sollten. Aber die gleiche Argumentation anwendend, die zu der Schlussfolgerung führt, dass Gewalt als Selbstverteidigung gerechtfertigt sei, schloss ich, dass es legitim wäre, ein proprietäres Paket zu nutzen, wenn das für die Entwicklung eines freien Ersatzes entscheidend war, der anderen helfen würde, das proprietäre Paket nicht mehr zu verwenden.

Aber selbst wenn dies ein gerechtfertigtes Übel war, war es immer noch ein Übel. Heute haben wir nicht mehr irgendwelche Kopien von Unix, weil wir sie durch freie Betriebssysteme ersetzten. Konnten wir das Betriebssystem eines Rechners nicht ersetzen, ersetzten wir stattdessen den Rechner.
GNU-Aufgabenliste

Mit Fortschreiten des GNU-Projekts und immer mehr gefundenen oder entwickelten Systemkomponenten wurde schließlich eine Liste der verbleibenden Lücken notwendig. Wir verwendeten sie, um Entwickler zu rekrutieren, fehlende Teile zu schreiben. Diese Liste wurde als GNU-Aufgabenliste bekannt. Zusätzlich zu fehlenden Unix-Komponenten führten wir verschiedene andere nützliche Software- und Dokumentationsprojekte auf, die unserer Meinung nach ein Gesamtsystem haben sollte.

Heute sind kaum noch Unix-Komponenten in der GNU Task List[6] vorhanden ‑ diese sind, abgesehen von ein paar unwichtigen, abgearbeitet. Aber die Liste ist voll von Projekten, die manche „Anwendungen“ nennen mögen. Jedes Programm, das mehr als nur eine kleine Benutzergruppe anspricht, wäre sinnvoll, um es einem Betriebssystem hinzuzufügen.

Sogar Spiele sind in der Aufgabenliste enthalten ‑ und sind von Anfang an dabei. Unix enthielt Spiele, also sollte GNU natürlich auch welche enthalten. Da aber Kompatibilität kein Problem für Spiele war, mussten wir der Liste der Spiele nicht folgen, die Unix hatte. Stattdessen führten wir ein Spektrum verschiedener möglicher Spiele auf, die Benutzer mögen würden.

GNU Library GPL

Die GNU C-Bibliothek nutzt eine spezielle Art des Copyleft namens GNU Library General Public License (LGPL), die die Berechtigung erteilt, proprietäre Software mit der Bibliothek zu verbinden.(7) Warum diese Ausnahme?

Es ist keine Frage des Prinzips. Es gibt kein Prinzip, das proprietäre Softwareprodukte berechtigt unseren Quellcode einzubinden (warum zu einem Projekt beitragen, welches sich weigert, sich mit uns auszutauschen?). Die LGPL für die C-Bibliothek (oder für jedwede Bibliothek) zu verwenden, ist eine Frage der Strategie.

Die C-Bibliothek erfüllt eine allgemeine Aufgabe. Jedes proprietäre System oder jeder Compiler kommt mit einer C-Bibliothek. Deshalb hätte, wäre unsere C-Bibliothek ausschließlich für Freie Software verfügbar, dieser keinen Vorteil bringen ‑ es hätte nur von der Nutzung unserer Bibliothek abgehalten.

Ein System ist eine Ausnahme: in einem GNU-System (und dies schließt GNU/Linux ein) ist die GNU C-Bibliothek die einzige C-Bibliothek. Die Vertriebsbedingungen der GNU C-Bibliothek bestimmen, ob es möglich ist, ein proprietäres Programm für das GNU-System zu kompilieren. Es gibt keinen ethischen Grund, proprietäre Anwendungen auf einem GNU-System zu ermöglichen, aber strategisch gesehen scheint es, dass das Verbieten eher von der Nutzung des GNU-Systems abhält, als die Entwicklung freier Anwendungen zu fördern. Deshalb ist die Verwendung der Library GPL eine gute Strategie für die C-Bibliothek.

Für andere Bibliotheken muss die strategische Entscheidung individuell getroffen werden. Wenn eine Bibliothek bei einer speziellen Aufgabe helfen kann, bestimmte Arten von Programmen zu schreiben und dann unter der GPL freizugeben ‑ auf lediglich freie Programme begrenzt ‑ ist das ein Weg, anderen Freie-Software-Entwicklern zu helfen und einen Vorteil gegenüber proprietäre Software zu geben.

Betrachten wir GNU Readline, eine Bibliothek, die entwickelt wurde, um für BASH die Befehlszeilenbearbeitung zu ermöglichen. Readline wird unter der gewöhnlichen GNU GPL vertrieben, nicht unter der Library GPL. Das reduziert möglicherweise die Häufigkeit, mit der Readline benutzt wird, aber das ist kein Verlust für uns. Inzwischen wurde mindestens eine nützliche Anwendung ausdrücklich zu freier Software gemacht, damit sie Readline nutzen kann, und das ist ein echter Gewinn für die Gemeinschaft.

Entwickler proprietärer Software haben die Vorteile, die Geld ermöglicht; Entwickler freier Software müssen sich gegenseitig Vorteile für einander verschaffen. Ich hoffe, wir haben eines Tages eine große Sammlung GPL-lizenzierter Bibliotheken, die keine Parallelen zu verfügbarer proprietärer Software bilden, nützliche Module liefern, die als Bausteine in neuer freier Software dienen und sich zu einem größeren Vorteil für die weitere Freie-Software-Entwicklung summieren.

Einen Juckreiz löschen?

Eric Raymond sagt: "Jedes gute Werk von Software fängt mit dem Kratzen eines persönlichen Juckreizes des Entwicklers an." Vielleicht passiert das manchmal, aber viele wesentliche Teile der GNU-Software wurden entwickelt um ein vollständig freies Betriebssystem zu haben. Sie stammen aus einer Vision und einem Plan, nicht aus einem Impuls heraus.

Beispielsweise wurde die C-Bibliothek entwickelt, weil ein unixartiges System eine C-Bibliothek braucht, BASH, weil ein unixoides System einen Befehlszeileninterpreter braucht, und GNU Tar, weil ein unixoides System ein Archivierungsprogramm braucht. Gleiches gilt für die von mir geschriebenen Programme ‑ den GNU C-Compiler, GNU Emacs, GDB und GNU Make.

Einige GNU-Programme wurden entwickelt, um bestimmte Bedrohungen unserer Freiheit zu bewältigen. So entwickelten wir GZIP, um das Komprimierungsprogramm zu ersetzen, das der Gemeinschaft wegen der Patente auf LZW-verloren gegangen war. Wir fanden Menschen um LessTif zu entwickeln und begannen vor kurzem mit der Entwicklung von GNOME und Harmony, um die durch bestimmte proprietäre Bibliotheken verursachten Probleme anzugehen (siehe unten). Wir entwickelten den GNU Privacy Guard, um eine beliebte unfreie Verschlüsselungssoftware zu ersetzen, weil Benutzer nicht zwischen Privatsphäre und Freiheit sollten wählen müssen.

Die Personen, die diese Programme schrieben, interessierten sich natürlich für die Arbeit, und viele Funktionen wurden von verschiedenen Personen aufgrund eigener Anforderungen und Interessen hinzugefügt. Doch darum existieren die Programme nicht.
Unerwartete Entwicklungen

Zu Beginn des GNU-Projekts stellte ich mir vor, wir würden das gesamte GNU-System entwickeln und dann als Ganzes freigeben. So ist es nicht gekommen.

Da jede Komponente des GNU-Systems auf einem Unix-System umgesetzt wurde, konnte jede auf einem Unix-System ausgeführt werden, lange bevor ein komplettes GNU-System existierte. Einige dieser Programme wurden populär und Benutzer begannen sie zu erweitern und zu portieren ‑ auf die verschiedenen inkompatiblen Versionen von Unix und manchmal auch auf andere Systeme.

Dieser Vorgang machte diese Programme sehr viel mächtiger und zog sowohl Gelder als auch Mitwirkende zum GNU-Projekt. Aber er verzögerte möglicherweise auch die Fertigstellung eines minimal funktionierenden Systems um mehrere Jahre, da GNU-Entwickler Zeit in die Betreuung dieser Schnittstellen und zusätzliche Funktionen zu bestehenden Komponenten aufbrachten, anstatt eine fehlende Komponente nach der anderen zu schreiben.
GNU Hurd

Um 1990 war das GNU-System fast fertig. Die einzige größere fehlende Komponente war der Betriebssystemkern. Wir hatten beschlossen, unseren Systemkern als eine Sammlung von Serverprozessen zu implementieren, die auf dem Mach laufen. Mach ist ein an der Carnegie Mellon-Universität und dann an der Universität von Utah entwickelter Mikrokern. GNU HURD ist eine Sammlung von Servern (d. h. eine Herde GNUs), die auf dem Mach laufen und verschiedene Aufgaben des Unix-Betriebssystemkerns erledigen. Der Beginn der Entwicklung wurde verzögert, da wir, wie versprochen wurde, auf die Freigabe von Mach als Freie Software warteten.

Ein Grund für die Wahl dieses Designs war zu vermeiden, was, wie es schien, der schwierigste Teil der Aufgabe war: Ein Systemkernprogramm ohne einen Source-Level-Debugger zu debuggen [Diagnose auf Quelltextebene]. Dieser Teil der Aufgabe war bereits im Mach erledigt, und wir erwarteten die HURD-Server als Benutzerprogramme mit GDB zu debuggen. Aber es brauchte lange Zeit, um dies zu ermöglichen und die Multithread-Server, die sich gegenseitig Nachrichten senden, sich als sehr schwierig zu debuggen erwiesen haben. Den HURD zum soliden Arbeiten zu bringen, zog sich über mehrere Jahre hin.
Alix

Der GNU-Betriebssystemkern sollte ursprünglich nicht HURD genannt werden. Sein ursprünglicher Name war Alix ‑ benannt nach der Frau, die damals mein Schatz war. Sie, eine Unix-Systemadministratorin, hatte darauf hingewiesen wie ihr Name in ein allgemeines Namensmuster für Unix-Systemversionen passen würde. "Jemand sollte einen Systemkern nach mir benennen" witzelte sie unter Freunden. Ich sagte nichts dazu, aber beschloss sie mit einem Systemkern namens Alix zu überraschen.

Es blieb nicht dabei. Michael Bushnell (heute Thomas Bushnell), der Hauptentwickler des Systemkerns, bevorzugte den Namen HURD und definierte Alix neu, um auf einen bestimmen Teil des Systemkerns zu verweisen ‑ den Teil, der Systemaufrufe abfangen und diese durch Senden von Nachrichten an die Hurd-Server behandeln würde.

Später trennten sich unsere Wege und Alix änderte ihren Nachnamen; unabhängig davon wurde das HURD-Design geändert, damit die C-Bibliothek Nachrichten direkt an die Server senden würde, und das ließ die Alix-Komponente aus dem Design verschwinden.

Doch bevor diese Dinge passierten, stieß ein Freund von ihr auf den Namen Alix im HURD-Quellcode und erwähnte es ihr gegenüber. Sie hatte also die Chance, einen nach ihr benannten Systemkern zu finden.
Linux und GNU/Linux

GNU Hurd ist nicht für den produktiven Einsatz geeignet und wir wissen nicht, ob es jemals so sein wird. Das fähigkeitsbasierte Konzept hat Probleme, die sich direkt aus der Flexibilität des Konzepts ergeben und es ist nicht klar, ob Lösungen existieren.

Glücklicherweise ist ein anderer Betriebssystemkern verfügbar. Im Jahr 1991 entwickelte Linus Torvalds einen Unix-kompatiblen Systemkern und nannte ihn Linux. Es war zunächst proprietär, aber im Jahr 1992 machte er es zu Freie Software. Die Kombination von Linux mit dem noch nicht ganz fertigen GNU-System führte zu einem vollständig freien Betriebssystem (die Kombination war natürlich eine erhebliche Aufgabe an sich). Es ist Linux zu verdanken, dass wir heute tatsächlich eine Version des GNU-Systems verwenden können.

Wir nennen diese Version des Systems GNU/Linux, um dessen Zusammensetzung als Kombination aus dem GNU-System mit Linux als Systemkern auszudrücken. Bitte verfallen Sie nicht der Praxis, das Gesamtsystem „Linux“ zu nennen, da das fälschlicherweise unsere Arbeit auf jemand anderen zurückführt. Bitte geben Sie uns eine ebensolche Erwähnung.
Herausforderungen in der Zukunft

Wir haben unsere Fähigkeit, ein breites Spektrum an freier Software zu entwickeln, bewiesen. Das bedeutet nicht, wir seien unbesiegbar und unaufhaltsam. Verschiedene Herausforderungen machen die Zukunft von freier Software unsicher; sie zu erfüllen, erfordert unerschütterliche Anstrengungen und Durchhaltevermögen, manchmal für Jahre. Es ist die Art von Entschlossenheit erforderlich, die Menschen zeigen, wenn sie ihre Freiheit schätzen und sich von niemanden wegnehmen lassen.

Die folgenden vier Abschnitte erörtern diese Herausforderungen.
Geheime Hardware

Hardwarehersteller tendieren zunehmend dazu, Hardwarespezifikationen geheim zu halten. Das macht es schwierig, freie Treiber zu schreiben, damit Linux und XFree86 neue Hardware unterstützen können. Wir haben heute vollständig freie Systeme, aber wir werden sie morgen nicht mehr haben, wenn wir die Rechner von morgen nicht unterstützen können.

Es gibt zwei Wege, um mit diesem Problem fertig zu werden. Die Programmierer können mit Reverse Engineering ‚Nachkonstruktion‘ herausfinden, wie man die Hardware unterstützen kann. Der Rest von uns kann die Hardware wählen, die von freier Software unterstützt wird; bei steigender Nutzerzahl wird das Geheimhalten der Spezifikationen eine selbstzerstörerische Politik.

Reverse Engineering ist eine äußerst umfangreiche Aufgabe. Werden wir Programmierer mit ausreichender Entschlossenheit haben, dies zu übernehmen? Ja, wenn wir ein starkes Gefühl aufgebaut haben, dass freie Software eine Frage des Prinzips ist und unfreie Treiber unerträglich sind. Und werden viele zusätzliches Geld spenden oder sogar ein wenig mehr Zeit, damit wir freie Treiber nutzen können? Ja, wenn die Entschlossenheit, Freiheit zu haben, weit verbreitet ist.

(Anmerkung: Dieses Problem erstreckt sich auch auf das BIOS. Es gibt ein freies BIOS namens LibreBoot. Das Problem ist Spezifikationen für Rechner zu erhalten, damit LibreBoot sie ohne unfreie Binary Large Objects ‚BLOBs‘ unterstützen kann. Stand: 2008)
Unfreie Bibliotheken

Eine unfreie Bibliothek, die auf einem freien Betriebssystem ausgeführt wird, verhält sich für Freie-Software-Entwickler wie ein Falle. Die attraktiven Funktionen der Bibliothek sind der Köder, und wenn man sie nutzt, schnappt die Falle zu, weil das Programm nicht nutzbringend Teil eines freien Betriebssystems sein kann (streng genommen könnte man das Programm einbinden, aber es würde mit fehlender Bibliothek unmöglich ausgeführt werden können). Noch schlimmer ist, wenn ein Programm, das die proprietäre Bibliothek nutzt, immer beliebter wird und so andere ahnungslose Programmierer in die Falle lockt.

Der erste Fall dieses Problems war der Motif-Werkzeugsatz, damals in den 80ern. Obwohl es noch keine freien Betriebssysteme gab, war klar, welche Probleme Motif später verursachen würde. Das GNU-Projekt reagierte auf zweierlei Weise: indem einzelne Freie-Software-Projekte gebeten wurden, die freien Steuerelemente des X-Werkzeugsatzes als auch Motif zu unterstützen und indem nach jemand gesucht wurde, einen freien Ersatz für Motif zu schreiben. Diese Aufgabe dauerte viele Jahre; LessTif, von ungarischen Programmierern entwickelt, unterstütze erst ab 1997 die meisten Motif-Anwendungen.

Zwischen 1996 und 1998 wurde eine andere Bibliothek namens Qt als unfreie grafische Benutzerschnittstelle ‚GUI‘ in einer umfangreichen Freie-Software-Sammlung, der KDE-Arbeitsumgebung, genutzt.

Freie GNU/Linux-Systeme waren außerstande KDE zu verwenden, denn die Bibliothek konnte nicht genutzt werden. Allerdings fügten einige kommerzielle Distributoren von GNU/Linux-Systemen, die nicht streng an freier Software festhielten, KDE ihren Systemen hinzu ‑ produzierten so ein System mit mehr Möglichkeiten, aber weniger Freiheit. Die KDE-Gruppe ermutigte aktiv mehr Programmierer Qt zu benutzen, und Millionen von neuen „Linux-Nutzern“ waren nie der Idee ausgesetzt worden, dass es damit ein Problem gab. Die Situation war makaber.

Die Freie-Software-Gemeinschaft reagierte auf das Problem in zweierlei Weise: GNOME und Harmony.

GNOME, das GNU Network Object Model Environment, ist GNUs Projekt einer grafischen Benutzeroberflächen-Umgebung. 1997 von Miguel de Icaza gestartet und entwickelt mit der Unterstützung von Red Hat Software, machte sich GNOME auf den Weg, mit ausschließlich freier Software eine ähnliche Ausstattung der Arbeitsumgebung zu schaffen. Es hat auch technische Vorteile wie die Unterstützung einer Vielzahl von Programmiersprachen, nicht nur C++. Aber das wichtigste Ziel war Freiheit: keine unfreie Software erforderlich.

Harmony ist eine kompatible Ersatzbibliothek, entworfen, um zu ermöglichen, KDE-Software ohne Qt zu nutzen.

Im November 1998 kündigten die Entwickler von Qt eine Änderung der Lizenz an, die, wenn in die Tat umgesetzt, Qt zu freier Software machen sollte. Es gibt keine Möglichkeit um sicher zu sein, aber ich denke, dass dies zum Teil durch die entschiedene Reaktion der Gemeinschaft auf das Problem, das Qt darstellte als es unfrei war, verursacht war (die neue Lizenz ist ungeeignet und ungerecht, so bleibt es wünschenswert, die Nutzung von Qt zu vermeiden).

(Nachträgliche Anmerkung: Im September 2000 wurde Qt unter der GNU GPL neu freigegeben, was dieses Problem im Grunde löste.)

Wie antworten wir auf die nächste verlockende unfreie Bibliothek? Versteht die gesamte Gemeinschaft die Notwendigkeit, nicht in die Falle zu tappen? Oder geben viele von uns Freiheit zugunsten Bequemlichkeit auf und erzeugen so ein größeres Problem? Unsere Zukunft hängt von unserer Philosophie ab.
Softwarepatente

Die schlimmste Bedrohung mit der wir uns konfrontiert sehen stammt von Softwarepatenten, die für bis zu zwanzig Jahre Algorithmen und Funktionen für Freie Software tabu setzen können. Die Patente für das LZW-Komprimierungsverfahren wurden 1983 beantragt, und wir können noch immer keine Freie Software freigeben, um ordnungsgemäß komprimierte GIF-Dateien (Graphics Interchange Format) zu erzeugen.(*) 1998 wurde ein freies Programm zur Produktion von komprimiertem MP3-Audio (MPEG-1 Audio Layer 3) unter Androhung einer Patentklage aus der Distribution herausgenommen.(**)

Es gibt Möglichkeiten, Patente zu bewältigen: man kann nach Beweisen suchen, ob ein Patent ungültig ist und nach alternativen Wegen suchen um eine Aufgabe zu lösen. Aber jede dieser Methoden funktioniert nur manchmal. schlagen beide fehl, kann ein Patent jegliche Freie Software dazu zwingen, dass eine Eigenschaft fehlt, die Benutzer wollen. Nach einer langen Wartezeit erlöschen Patente (die MP3-Patente beispielsweise erlöschen voraussichtlich bis 2018), aber was machen wir bis dahin?

Diejenigen von uns, die freie Software der Freiheit wegen schätzen, bleiben sowieso bei freier Software. Wir schaffen es, Aufgaben ohne patentierte Funktionen zu erledigen. Aber diejenigen, die freie Software schätzen, weil sie sie als technisch überlegen erwarten, werden es wahrscheinlich einen Misserfolg nennen, wenn ein Patent davon abhält. Daher, obwohl es sinnvoll ist, über die praktische Wirksamkeit des Bazaar-Entwicklungsmodells sowie der Zuverlässigkeit und Macht irgendeiner freien Software zu sprechen, dürfen wir dort nicht anhalten. Wir müssen über Freiheit und Prinzipien sprechen.
Freie Dokumentation

Der größte Mangel an unseren freien Betriebssystemen ist nicht die Software ‑ es ist der Mangel an guten freien Handbüchern, die wir in unsere Systeme integrieren können. Dokumentation ist ein wesentlicher Bestandteil jedes Softwarepakets; wenn ein wichtiges freies Softwarepaket nicht mit einem guten freien Handbuch erhältlich ist, ist das eine große Lücke. Wir haben heute viele solcher Lücken.

Freie Dokumentation, wie freie Software, ist eine Frage der Freiheit, nicht des Preises. Das Kriterium eines freien Handbuchs ist dem freier Software ziemlich ähnlich: es geht darum, allen Benutzern bestimmte Freiheiten zu gewähren. Weitervertrieb (einschließlich kommerziellen Verkaufs) muss online und auf Papier erlaubt sein, damit das Handbuch jede Programmkopie begleiten kann.

Die Berechtigung zur Modifikation ist ebenfalls von entscheidender Bedeutung. Im Allgemeinen glaube ich nicht, dass die Berechtigung notwendig ist, alle möglichen Artikel und Bücher modifizieren zu dürfen. Beispielsweise denke ich nicht, dass Sie oder ich verpflichtet sind die Berechtigung zu erteilen, Artikel wie diesen zu modifizieren, der unsere Handlungen und Ansichten beschreibt.

Es gibt aber einen bestimmten Grund, warum die Freiheit zur Modifizierung für Dokumentation von freier Software entscheidend ist. Wenn die Menschen ihr Recht ausüben, Software zu modifizieren und Funktionen zu ändern oder hinzuzufügen, wenn sie gewissenhaft sind, ändern sie das Handbuch auch ‑ damit eine genaue und nutzbare Dokumentation mit dem modifizierten Programm angeboten werden kann. Ein unfreies Handbuch, dass gewissenhaften Programmierern nicht erlaubt die Aufgabe zu beenden, erfüllt nicht den Bedarf unserer Gemeinschaft.

Einige Einschränkungen, wie Modifikationen vorgenommen werden können, werfen keine Probleme auf. Beispielsweise sind Anforderungen, den Copyright-Hinweis des Originalautors, die Vertriebsbedingungen oder die Autorenliste anzugeben, in Ordnung. Es ist auch kein Problem zu verlangen, dass modifizierte Versionen einen Hinweis enthalten, dass sie modifiziert wurden, ebenso wie ganze Abschnitte vor dem Löschen oder Verändern zu schützen, solange diese Abschnitte nichttechnische Themen behandeln. Diese Beschränkungen sind kein Problem, weil sie den gewissenhaften Programmierer nicht davon abhalten, das Handbuch dem modifizierten Programm anzupassen. Mit anderen Worten halten sie die Freie-Software-Gemeinschaft nicht davon ab, vollen Gebrauch vom Handbuch zu machen.

Jedoch muss es möglich sein, den ganzen technischen Inhalt des Handbuchs zu modifizieren und das Ergebnis mit allen gängigen Medien und üblichen Kanälen zu verbreiten; andernfalls behindern die Beschränkungen die Gemeinschaft, das Handbuch ist unfrei und wir brauchen ein anderes.

Haben Freie-Software-Entwickler das Bewusstsein und die Entschlossenheit, ein breites Spektrum von freien Handbüchern zu schreiben? Noch einmal hängt unsere Zukunft von Philosophie ab.
Wir müssen über Freiheit sprechen

Nach heutigen Schätzungen gibt es zehn Millionen Nutzer von GNU/Linux-Systemen wie Debian GNU/Linux und Red Hat „Linux“. Freie Software hat solche praktische Vorteile entwickelt, dass Nutzer aus rein praktischen Erwägungen zuströmen.

Die guten Konsequenzen daraus sind offensichtlich: mehr Interesse an der Entwicklung freier Software, mehr Kunden für Geschäfte mit freier Software und mehr Möglichkeiten, Unternehmen zu ermutigen, kommerzielle freie Software anstelle proprietärer Softwareprodukte zu entwickeln.

Aber das Interesse an der Software wächst schneller als das Bewusstsein der Philosophie, auf der sie basiert, und das führt zu Problemen. Unsere Möglichkeiten, den o. a. Herausforderungen und Bedrohungen zu entsprechen, hängt vom Willen ab, eine feste Haltung für Freiheit einzunehmen. Um sicherzugehen, dass unsere Gemeinschaft diesen Willen hat, müssen wir den Gedanken an neue Nutzer verbreiten, wenn sie in die Gemeinschaft kommen.

Aber wir versagen dabei: die Bemühungen, neue Benutzer für unsere Gemeinschaft zu gewinnen, übersteigen bei weitem die Bemühungen, ihnen die Pflichten unserer Gemeinschaft zu lehren. Wir müssen beides machen, und wir müssen beide Bemühungen im Gleichgewicht halten.
„Open Source“

Neuen Benutzern etwas über Freiheit zu lehren wurde 1998 schwieriger, als ein Teil der Gemeinschaft beschloss, nicht mehr den Begriff Freie Software zu verwenden, sondern stattdessen „Open-Source“-Software.

Einige, die diesen Begriff bevorzugten, hatten zum Ziel, die Verwechslung von frei mit gratis zu vermeiden ‑ ein zulässiges Ziel. Andere hatten jedoch zum Ziel, den Geist des Prinzips ins Abseits zu drängen, der die Freie-Software-Bewegung und das GNU-Projekt motivierte, und stattdessen an Führungskräfte und Geschäftskunden zu appellieren, von denen viele eine Ideologie haben, die Gewinn über Freiheit, über Gemeinschaft und über Prinzipien stellt. So konzentriert sich die Rhetorik von „Open Source“ auf das Potenzial, qualitativ hochwertige und leistungsfähige Software herzustellen, aber die Ideen von Freiheit, Gemeinschaft und Prinzip meidet.

Die „Linux“-Fachzeitschriften sind ein eindeutiges Beispiel dafür ‑ sie sind mit Werbung für proprietäre Software gefüllt, die mit GNU/Linux funktioniert. Wenn das nächste Motif oder Qt erscheint, werden diese Magazine Programmierer warnen sich davon fernzuhalten oder werden sie dafür werben?

Die Unterstützung des Geschäfts kann in vielerlei Hinsicht zur Gemeinschaft beitragen; unter sonst gleichen Bedingungen ‚Ceteris Paribus‘ ist es nützlich. Aber ihre Unterstützung zu gewinnen, indem man noch weniger über Freiheit und Prinzipien spricht, kann katastrophal sein; es macht das vorherige Ungleichgewicht zwischen sozialem Engagement und politischer Bildung noch schlimmer.

Freie Software und Open Source beschreiben mehr oder weniger die gleiche Softwarekategorie, aber sagen verschiedene Dinge über Software und Werte. Das GNU-Projekt verwendet weiterhin den Begriff Freie Software um die Idee zum Ausdruck zu bringen, dass Freiheit, nicht nur Technik, wichtig ist.
Testen Sie!

Yodas Aphorismus ("Es gibt kein "Versuchen"") klingt nett, aber funktioniert nicht für mich. Ich habe die meisten meiner Aufgaben geleistet, während ich besorgt war, ob ich sie erledigen kann und unsicher war, ob es ausreichen würde um das Ziel zu erreichen. Aber ich versuchte es trotzdem, denn es gab niemand außer mir zwischen dem Feind und meiner Stadt. Selbst überrascht, ist es manchmal gelungen.

Manchmal habe ich versagt; einige meiner Städte sind gefallen. Dann fand ich eine andere bedrohte Stadt und machte mich für eine andere Schlacht bereit. Im Laufe der Zeit habe ich gelernt, nach Bedrohungen Ausschau zu halten und mich selbst zwischen sie und meine Stadt zu stellen, und rief andere Hacker auf, zu kommen und sich mir anzuschließen.

Heutzutage bin ich oft nicht der einzige. Es ist eine Erleichterung und Freude, wenn ich sehe wie sich ein Regiment von Hackern eingräbt, um die Stellung zu halten, und weiß, diese Stadt kann überleben ‑ im Moment. Aber die Gefahren werden jedes Jahr größer, und nun hat sich Microsoft klar gegen unsere Gemeinschaft ausgerichtet. Wir können die zukünftige Freiheit nicht für selbstverständlich halten. Halten Sie sie nicht für selbstverständlich! Wenn Sie Ihre Freiheit behalten möchten, müssen Sie bereit sein sie zu verteidigen.

    1. Die Verwendung von Hacker im Sinne von Sicherheitsbrecher ist eine Irreführung seitens der Massenmedien. Wir Hacker weigern uns diese Bedeutung anzuerkennen und verwenden dieses Wort weiterhin in seiner Bedeutung dahingehend für jemanden der es liebt zu programmieren, jemanden der sich spielerischer Klugheit erfreut oder die Kombination von beiden. Siehe auch meinen Artikel Auf das Hacken (engl.).
    2. Als Atheist folge ich keinen Religionsführern, stelle aber manchmal fest, dass ich etwas bewundere, was einer von ihnen gesagt hat.
    3. 1984 oder 1985 schickte mir Don Hopkins (ein sehr einfallsreicher Bursche) einen Brief. Auf den Umschlag hatte er etliche amüsante Sprüche geschrieben, unter anderen diesen: Copyleft ‑ All Rights Reversed. (‚Copyleft ‑ Alle Rechte vertauscht.‘). Ich nutzte das Wort Copyleft, um das Vertriebskonzept zu benennen, welches ich gerade entwickelte.
    4. Wir verwenden nun die GNU Free Documentation License für die Dokumentation.
    5. Bourne Again Shell ist ein Wortspiel mit dem Namen Bourne Shell, welche die übliche Shell unter Unix war.
    6. Diese wurde in 1998 geschrieben. Im Jahr 2009 pflegen wir keine lange Aufgabenliste mehr. Die Gemeinschaft entwickelt Freie Software so schnell, dass wir nicht einmal jede im Auge behalten können. Stattdessen haben wir Projekte mit hoher Priorität, eine viel kürzere Projektliste, mit der wir Menschen wirklich ermutigen möchten zu schreiben. [Siehe auch die ursprüngliche GNU Task List von 1998, A. d. Ü.].
    7. Diese Lizenz wird heute GNU Lesser General Public License (LGPL) genannt, um die Idee zu vermeiden, sie für alle Bibliotheken zu verwenden. Siehe Warum man die Lesser GPL nicht für die nächste Bibliothek verwenden sollte.


Anmerkungen des Autors:

    (*) Patente auf den LZW-Komprimierungsalgorithmus sind seit 2009 erloschen.
    (**) Patente auf komprimiertes MP3-Audio sind seit 2017 erloschen. Beachte, wie lange wir warten mussten.



https://www.gnu.org/gnu/initial-announcement.html
Neue Unix-Implementierung: Ursprüngliche Ankündigung [des GNU-Projekts]

Dies ist die ursprüngliche Ankündigung des GNU-Projekts, geschrieben von Richard Stallman am 27. September 1983.

Die tatsächliche Geschichte des GNU-Projekts unterscheidet sich in vielerlei Hinsicht vom anfänglichen Vorhaben. Beispielsweise verzögerte sich der Beginn bis Januar 1984. Mehrere philosophische Freie-Software-Konzepte wurden erst einige Jahre später geklärt.
Freies Unix!

Ab diesem Thanksgiving[*] werde ich ein vollständig unixkompatibles Softwaresystem namens GNU (für Gnu’s Nicht Unix) schreiben und es an jedermann frei weggeben(1), der es benutzen kann. Beiträge in Form von Zeit, Geld, Programmen und Ausrüstung sind dringend erforderlich.

Zunächst wird GNU ein Betriebssystemkern mit allen benötigten Dienstprogrammen sein, um C-Programme schreiben und ausführen zu können: Editor, Kommandozeileninterpreter, C-Compiler, Linker, Assembler und noch ein paar andere Dinge. Danach werden wir einen Textformatierer, einen YACC, ein Empire-Spiel, eine Tabellenkalkulation und Hunderte anderer Dinge hinzufügen. Wir hoffen, letztendlich, alles Nützliche anzubieten, was normalerweise mit einem Unix-System kommt, und alles sonst nützliche, einschließlich Onlinedokumentation und gedruckter Dokumentation.

GNU wird Unix-Programme ausführen können, aber nicht mit Unix identisch sein. Wir werden alle Verbesserungen vornehmen, die auf Grundlage unserer Erfahrung mit anderen Betriebssystemen zweckmäßig sind. Im Besonderen beabsichtigen wir längere Dateinamen, Dateiversionsnummern, ein absturzsicheres Dateisystem, vielleicht die Vervollständigung von Dateinamen, rechnerunabhängige Bildschirmunterstützung und schließlich ein auf Lisp basierendes Fenstersystem, mit dem verschiedene Lisp- und gewöhnliche Unix-Programme Bildschirminhalte gemeinsam nutzen können. Sowohl C als auch Lisp werden als Systemprogrammsprachen verfügbar sein. Wir werden Netzwerksoftware, basierend auf dem MIT Chaosnet-Protokoll, dem Unix to Unix Copy Protocol (UUCP) weit überlegen, haben. Möglicherweise auch etwas, das mit UUCP kompatibel ist.
Wer bin ich?

Ich bin Richard Stallman, Erfinder des ursprünglichen und vielfach imitierten EMACS-Editors, nun am Labor für künstliche Intelligenz des MIT. Ich habe ausgiebig an Compilern, Editoren, Debuggern, Kommandointerpretern, dem interaktiven Mehrbenutzersystem ITS und dem Lisp-Rechner-Betriebssystem gearbeitet. Ich leistete Pionierarbeit für rechnerunabhängige Bildschirmunterstützung im ITS. Darüber hinaus implementierte ich ein absturzsicheres Dateisystem und zwei Fenstersysteme für Lisp-Rechner.
Warum ich GNU schreiben muss

Ich denke, die Goldene Regel verlangt, dass, wenn ich ein Programm mag, ich es mit Anderen gemeinsam nutzen muss, die es mögen. Ich kann nicht guten Gewissens eine Vertraulichkeits- oder eine Softwarelizenzvereinbarung unterzeichnen.

Damit ich weiterhin Rechner nutzen kann, ohne meine Prinzipien zu verletzen, habe ich mich entschieden, eine ausreichende Sammlung freier Software zusammenzustellen, damit ich in der Lage sein werde, ohne jegliche unfreie Software auszukommen.
Wie man beitragen kann

Ich bitte Rechnerhersteller um Rechner- und Geldspenden. Einzelpersonen bitte ich um Programmspenden und deren Arbeitskraft.

Ein Rechnerhersteller hat bereits angeboten, einen Rechner bereitzustellen. Aber wir könnten mehr gebrauchen. Wenn Sie Rechner spenden, können Sie erwarten, dass GNU darauf schon frühzeitig ausgeführt wird. Der Rechner sollte in einem Wohngebiet nutzbar sein und keine aufwendige Kühlung oder Stromversorgung benötigen.

Einzelne Programmierer können beitragen, indem sie ein kompatibles Duplikat eines Unix-Dienstprogramms schreiben und es mir geben. Für die meisten Projekte dürfte eine solche teilzeitlich verteilte Arbeit schwierig zu koordinieren sein; die unabhängig geschriebenen Teile würden nicht zusammenarbeiten. Aber für diese besondere Aufgabe, Unix zu ersetzen, ist dieses Problem nicht vorhanden. Die meisten Schnittstellenspezifikationen werden durch Unix-Kompatibilität geregelt. Wenn jeder Beitrag mit dem Rest von Unix arbeitet, arbeitet es vermutlich mit dem Rest von GNU.

Wenn ich Geldspenden erhalte, bin ich möglicherweise in der Lage einige Leute Voll- oder Teilzeit einzustellen. Das Gehalt wird nicht hoch sein, aber ich suche Leute, bei denen das Wissen, dass sie der Menschheit helfen, so wichtig ist wie Geld. Ich betrachte dies als eine Möglichkeit, engagierten Leuten zu ermöglichen, ihre ganzen Energien der Arbeit an GNU zu widmen, indem ich ihnen die Notwendigkeit erspare, den Lebensunterhalt auf andere Weise zu bestreiten.

Kontaktieren Sie mich für weitere Informationen:

via ARPANET-E-Mail:
RMS@MIT-MC.ARPA

via Usenet:
...!mit-eddie!RMS@OZ
...!mit-vax!RMS@OZ

US-Briefpost:
Richard Stallman
166 Prospect St
Cambridge, MA 02139
Nachtrag

(1) Schlechte Wortwahl um ‚frei‘

Die Formulierung war ein wenig sorglos. Die Absicht war, dass niemand für die Berechtigung würde zahlen müssen, um das GNU-System benutzen zu können. Aber die Wörter verdeutlichen dies nicht und werden häufig mit Kopien von GNU sollten immer mit geringen Kosten oder kostenlos verbreitet werden interpretiert. Das war nie die Absicht.


https://www.gnu.org/gnu/manifesto.html
GNU-Manifest

Das nachstehende GNU-Manifest wurde von Richard Stallman 1985 geschrieben, um um Unterstützung bei der Entwicklung des Betriebssystems GNU zu bitten. Ein Teil des Textes stammt aus der ursprünglichen Ankündigung von 1983 und wurde bis 1987 geringfügig angepasst, um neue Entwicklungen zu berücksichtigen; seither scheint es am besten, den Text unverändert zu belassen.

Seit dieser Zeit haben wir von einigen häufigen Missverständnissen erfahren, die durch eine andere Wortwahl hätten vermieden werden können. Seit 1993 hinzugefügte Kommentare helfen diese Punkte zu klären.

Wenn Sie das GNU-System installieren möchten, empfehlen wir, dass Sie eines der 100%ig Freie-Software-Distributionen von GNU/Linux verwenden. Weitere Informationen, wie man zu GNU beitragen kann, siehe http://www.gnu.org/help/.

Das GNU-Projekt ist Teil der Freie-Software-Bewegung, einer Kampagne für Freiheit für die Nutzer von Software. Es handelt sich daher um einen Fehler, GNU mit dem Begriff „Open Source“ zu assoziieren ‑ dieser Begriff wurde bereits 1998 von Personen geprägt, die mit den ethischen Werten der Freie-Software-Bewegung nicht übereinstimmten. Sie gebrauchten ihn, um einen unmoralischen Ansatz auf dem gleichen Gebiet zu fördern.
Was ist GNU? Gnu ist Nicht Unix!

GNU, was für Gnu's Not Unix (‚Gnu ist Nicht Unix‘) steht, ist der Name für das vollständig unixoide Softwaresystem, das ich schreibe, um es frei an jedermann wegzugeben, der es nutzen kann.(1) Einige andere Freiwillige unterstützen mich. Beiträge in Form von Zeit, Geld, Programmen und Ausstattung werden dringend benötigt.

Bis jetzt haben wir einen Emacs-Texteditor nebst Lisp zum Schreiben von Editorbefehlen, einen Quelltextdebugger, einen Yacc-kompatiblen Parsergenerator, einen Linker und etwa 35 Dienstprogramme. Ein Kommandozeileninterpreter ist beinahe fertig. Ein neuer portabler, optimierender C-Compiler hat sich aus seinem eigenen Quellcode kompiliert und kann dieses Jahr freigegeben werden. Ein anfänglicher Systemkern existiert, es werden aber noch viele Funktionen benötigt, um Unix emulieren zu können. Sobald Systemkern und Compiler fertiggestellt sind, wird es möglich sein, ein zur Programmentwicklung einsatzfähiges GNU-System zu verteilen. Wir werden TeX als Textsatzsystem einsetzen, aber auch an Nroff wird gearbeitet. Auch werden wir das freie, portable X Window System verwenden. Danach werden wir ein portables Common Lisp hinzufügen, ein Empire-Spiel, eine Tabellenkalkulation und hunderte weiterer Dinge plus Online-Dokumentation. Wir hoffen, schließlich alles Nützliche bereitstellen zu können, was normalerweise zu einem Unix-System gehört und vieles mehr.

GNU wird in der Lage sein Unix-Programme auszuführen, aber nicht mit Unix identisch sein. Auf Grundlage unserer Erfahrungen mit anderen Betriebssystemen werden wir alle gebräuchlichen Verbesserungen vornehmen. Insbesondere planen wir längere Dateinamen, Datei-Versionsnummern, ein absturzsicheres Dateisystem, eventuell Dateitypendungen, terminalunabhängige Anzeigeunterstützung und vielleicht irgendwann ein Lisp-basiertes Fenstersystem, durch welches mehrere Lisp- und gewöhnliche Unix-Programme sich einen Bildschirm teilen können. Sowohl C und Lisp werden als Systemprogrammiersprachen verfügbar sein. Für die Kommunikation beabsichtigen wir UUCP, MIT Chaosnet sowie Internetprotokolle zu unterstützen.

GNU richtet sich zunächst an Rechner der 68000/16000-Klasse mit virtuellem Speicher, weil es auf diesen am leichtesten lauffähig gemacht werden kann. Den zusätzlichen Aufwand, es auf kleinere Rechner zu portieren, überlassen wir jemandem, der es auf diesen verwenden will.

Um fürchterliche Verwechselungen zu vermeiden, sprechen Sie bitte das g im Wort GNU mit aus, wenn es sich dabei um den Namen dieses Projekts handelt.
Warum ich GNU schreiben muss

Ich denke, die Goldene Regel verlangt, dass, wenn ich ein Programm mag, ich es mit Anderen gemeinsam nutzen muss, die es mögen. Softwareanbieter hingegen wollen die Benutzer entzweien und unterwerfen, wobei sie jeden Anwender dazu verpflichten, nicht mit anderen zu teilen. Ich weigere mich, die Solidarität mit anderen Nutzern auf diese Weise zu brechen. Ich kann nicht guten Gewissens eine Vertraulichkeits- oder Softwarelizenzvereinbarung unterzeichnen. Jahrelang arbeitete ich im Labor für künstliche Intelligenz (KI-Labor) des MIT, um solchen Tendenzen und nicht vorhandenen Gastfreundlichkeiten zu widerstehen, aber letzten Endes waren sie zu weit gegangen: Ich konnte nicht in einer Institution bleiben, in der solche Dinge gegen meinen Willen geschehen.

Damit ich weiterhin Rechner ohne Schmach benutzen kann, habe ich beschlossen, eine genügend große Sammlung von freier Software zusammenzustellen, so dass ich in der Lage sein werde, ohne jegliche unfreie Software auszukommen. Ich habe beim KI-Labor gekündigt, um dem MIT keinen rechtlichen Vorwand zu bieten, mich daran zu hindern, GNU zu verschenken.(2)
Warum wird GNU mit Unix kompatibel sein

Unix ist nicht mein ideales System, aber es ist nicht so übel. Die wesentlichen Eigenschaften von Unix scheinen gute zu sein, und ich denke, dass ich fehlendes ergänzen kann, ohne die guten Eigenschaften zu verderben. Und ein mit Unix kompatibles System wäre für viele Menschen angenehm zu übernehmen.
Wie GNU erhältlich sein wird

GNU ist nicht in der Public Domain. Jedermanm wird erlaubt sein, GNU zu modifizieren und weiterzugeben, aber keinem Distributor wird erlaubt sein, die Weitergabe zu beschränken. D. h. proprietäre Modifikationen werden nicht erlaubt sein. Ich möchte damit sicherstellen, dass alle Varianten von GNU frei bleiben.
Warum viele andere Programmierer mithelfen wollen

Ich habe viele andere Programmierer gefunden, die von GNU begeistert sind und helfen wollen.

Viele Programmierer sind mit der Kommerzialisierung von Systemsoftware unzufrieden. Es mag ihnen die Möglichkeit geben, mehr Geld zu verdienen, aber es zwingt sie gleichzeitig, andere Programmierer im allgemeinen als Gegner anstatt als Kameraden zu betrachten. Der fundamentale Akt der Freundschaft zwischen Programmierern ist das Teilen von Programmen; derzeitige Vermarktungspraktiken verbieten Programmierern im wesentlichen, sich gegenseitig als Freunde zu behandeln. Der Käufer von Software hat die Wahl zwischen Freundschaft und Gesetzestreue. Naturgemäß entscheiden viele, dass Freundschaft für sie wichtiger ist, aber diejenigen, welche an das Gesetz glauben, haben eine schwere Entscheidung. Sie werden zynisch und betrachten Programmierung nur noch als eine Möglichkeit, Geld zu verdienen.

Durch die Arbeit an und mit GNU anstelle von proprietären Programmen, können wir gleichzeitig zu jedem gastfreundlich sein und das Gesetz befolgen. Außerdem dient GNU als inspirierendes Beispiel und Transparent, andere zu versammeln, um sich uns beim Teilen anzuschließen. Dies vermittelt uns ein Gefühl der Harmonie, das bei Nutzung unfreier Software unmöglich wäre. Für rund die Hälfte der Programmierer, mit denen ich sprach, ist dies ein entscheidendes Glücksgefühl, das durch Geld nicht ersetzt werden kann.
Wie Sie beitragen können

    (Um an aktuellen Softwareaufgaben mitzuarbeiten, siehe Projekte hoher Priorität und GNU-Projekte, die Hilfe suchen, der allgemeinen Aufgabenliste für GNU-Software. Für weitere Möglichkeiten der Hilfe siehe Ein Leitfaden zur Unterstützung des Betriebssystems GNU.)

Ich bitte Rechnerhersteller um Rechner- und Geldspenden. Einzelpersonen bitte ich um Spenden in Form von Programmen und Mitwirkung.

Wenn Sie uns einen Rechner zur Verfügung stellen, können Sie damit rechnen, dass GNU relativ früh darauf laufen wird. Die Rechner sollten komplette, gebrauchsfertige Systeme sein, in einer Wohnung benutzt werden können und keine außergewöhnliche Kühlung oder Stromversorgung benötigen.

Ich habe sehr viele Programmierer gefunden, die bereitwillig in Teilzeit zu GNU beitragen. Für die meisten Projekte dürfte eine solche teilzeitlich verteilte Arbeit schwierig zu koordinieren sein; die unabhängig geschriebenen Teile würden nicht zusammenarbeiten. Aber für diese besondere Aufgabe, Unix zu ersetzen, ist dieses Problem nicht vorhanden. Ein komplettes Unix-System enthält hunderte von Dienstprogrammen, von denen jedes separat dokumentiert ist. Die meisten Schnittstellenspezifikationen werden durch Unix-Kompatibilität geregelt. Wenn jeder Mitwirkende einen kompatiblen Ersatz für ein einzelnes Unix-Dienstprogramm schreiben kann und dafür sorgt, dass es anstelle des Originals auf einem Unix-System funktioniert, werden diese Dienstprogramme direkt zusammenarbeiten. Selbst wenn wir Murphy erlauben, ein paar unerwartete Probleme zu schaffen, sollte das Zusammensetzen dieser Komponenten eine durchführbare Aufgabe sein (der Systemkern erfordert eine genauere Kommunikation und wird von einer kleinen, festen Gruppe bearbeitet).

Sollte ich Geldspenden erhalten, werden mich diese in die Lage versetzen, ein paar Personen in Voll- oder Teilzeitarbeit einzustellen. Die Gehälter werden nicht dem Standard von Programmierern entsprechen, aber ich suche Personen, für die das Bilden von Gemeinschaftsgeist wichtiger ist als Geld zu verdienen. Ich betrachte dies als einen Weg, engagierten Menschen zu ermöglichen, ihre gesamte Energie der Arbeit an GNU zu widmen, indem ich sie von der Notwendigkeit freimache, ihren Lebensunterhalt auf andere Weise zu verdienen.
Warum alle Rechnerbenutzer profitieren

Sobald GNU geschrieben ist, wird jedermann in der Lage sein, gute Systemsoftware frei zu erhalten, so wie Luft.(3)

Dies bedeutet mehr, als nur jedem den Preis für eine Unix-Lizenz einzusparen. Es bedeutet, dass viel unnötige Doppelarbeit an System-Programmieraufwand vermieden werden kann. Diese Anstrengungen können stattdessen eingesetzt werden, um den Stand der Technik voranzubringen.

Der komplette Quelltext des Systems wird für jedermann verfügbar sein. Als Ergebnis wird jeder Benutzer, der Änderungen im System machen muss die Freiheit haben, diese selbst vorzunehmen, oder einen Programmierer oder eine Firma damit beauftragt. Die Benutzer werden nicht länger von der Gnade einzelner Programmierer oder Unternehmen abhängig sein, welche den Quelltext besitzen und daher als einzige Änderungen vornehmen können.

Schulen können ein viel besseres pädagogisches Umfeld bieten, wenn sie die Schüler dazu anhalten, den Code des Betriebssystems zu untersuchen und zu verbessern. Harvards Rechnerraum verlangte eine Richtlinie, dass kein Programm im System installiert werden durfte, dessen Quelltext nicht öffentlich zugänglich war ‑ und hielten dies aufrecht, indem bestimmte Programme tatsächlich nicht installiert wurden. Ich war sehr begeistert.

Und schließlich wird auch der Verwaltungsaufwand vermieden, zu überlegen, wem die Systemsoftware gehört und was man damit tun darf und was nicht.

Durch Vorkehrungen, um Menschen für die Nutzung eines Programms, einschließlich der Lizenzierung von Kopien, zahlen zu lassen, entstehen immer gewaltige Kosten für die Gesellschaft durch den schwerfälligen Mechanismus notwendig, um herauszufinden für wie viel (d. h. für welche Programme) eine Person zahlen muss. Und nur ein Polizeistaat kann jeden dazu zwingen, sie zu befolgen. Stellen Sie sich eine Raumstation vor, wo die Luft mit großem Aufwand hergestellt werden muss: Es mag fair sein, Atemluft pro verbrauchten Liter zu berechnen, aber die gebührenpflichtige Gasmaske, den ganzen Tag und die ganze Nacht tragend, ist unerträglich, selbst wenn für jeden die Berechnung der Luft erschwinglich ist. Und allgegenwärtige Fernsehkameras, die überwachen, ob jemand die Maske abnimmt, sind ungeheuerlich. Es ist besser, die Luftanlage mit einer Pro-Kopf-Steuer zu finanzieren und die Masken wegzuwerfen.

Das Kopieren eines Programms oder Teile davon ist für einen Programmierer ebenso selbstverständlich wie das Atmen, und genauso nutzbringend. Es sollte genauso frei sein.
Einige leicht zu entkräftende Einwände gegen die Ziele von GNU

"Niemand wird es benutzen, wenn es umsonst ist, weil das bedeutet, sich nicht auf Unterstützung verlassen zu können."

"Man muss etwas für das Programm berechnen, um Unterstützung anbieten zu können."

Wenn man für GNU mit Dienstleistung eher bezahlen würde als GNU ohne Dienstleistung umsonst zu erhalten, sollte ein Unternehmen, dass diese Dienstleistung speziell für Personen anbietet, die GNU umsonst erhalten haben, profitabel sein.(4)

Wir müssen zwischen Unterstützung in Form von echter Programmierarbeit und Händchenhalten unterscheiden. Ersteres ist etwas, das man nicht von einem Softwarehändler erwarten kann. Wenn Ihr Problem nicht von genügend Personen geteilt wird, wird der Händler Ihnen sagen, Sie hätten sich verlaufen.

Wenn Ihr Unternehmen darauf angewiesen ist, sich auf Unterstützung zu verlassen, ist der einzige Weg, alle notwendigen Quelltexte und Werkzeuge vorliegen zu haben. Dann können Sie jede verfügbare Person beauftragen, Ihr Problem zu lösen; Sie sind nicht Einzelnen ausgeliefert. Mit Unix ist dies infolge des hohen Preises der Quelltexte für die meisten Unternehmen unerschwinglich. Mit GNU wird dies leicht sein. Es ist zwar immer noch möglich, dass keine kompetente Person zur Verfügung steht, aber dies Problem liegt dann nicht an den Vertriebsbedingungen. GNU beseitigt nicht alle Probleme der Welt, sondern nur bestimmte.

Gleichzeitig sind Anwender ohne Rechnerwissen auf Hilfe angewiesen: Dinge erledigen, die sie leicht selbst tun könnten, aber nicht wissen, wie.

Solche Dienstleistungen können von Unternehmen angeboten werden, die gerade solche Benutzerhilfen und Reparaturdienste anbieten. Wenn es stimmt, dass Benutzer es vorziehen für ein Produkt mit Dienstleistung zu bezahlen, werden sie auch bereit sein die Dienstleistung zu bezahlen, wenn sie das Produkt umsonst erhalten haben. Die Dienstleistungsunternehmen werden in Qualität und Preis miteinander konkurrieren; Benutzer nicht an ein bestimmtes gebunden sein. In der Zwischenzeit sollten diejenigen von uns, die die Dienstleistung nicht benötigen, in der Lage sein, das Programm zu benutzen, ohne die Dienstleistung bezahlen zu müssen.

"Ohne Werbung kann man nicht viele Menschen erreichen, und man muss etwas für das Programm berechnen, um dies zu ermöglichen."

"Es bringt nichts Werbung für ein Programm zu machen, was man umsonst bekommen kann."

Es gibt viele Formen kostenloser oder kostengünstiger Werbung, die dazu dienen kann, viele Rechnerbenutzer über so etwas wie GNU zu informieren. Es mag stimmen, dass man mehr Benutzer von Kleinrechnern durch Werbung erreichen kann. Wenn dies wirklich so ist, sollte ein Unternehmen, das für die Dienstleistung wirbt, GNU gegen eine Gebühr zu kopieren und zu versenden, erfolgreich genug sein, um damit seine Werbung und mehr zu bezahlen. Auf diese Weise bezahlen nur die Nutzer, die von der Werbung profitieren.

Wenn andererseits viele Personen GNU von ihren Freunden erhalten und solche Unternehmen keinen Erfolg haben, zeigt dies, dass Werbung in Wirklichkeit gar nicht nötig war, um GNU zu verbreiten. Warum wollen die Befürworter der freien Marktwirtschaft nicht den freien Markt darüber entscheiden lassen?(5)

"Mein Unternehmen benötigt ein proprietäres Betriebssystem, um einen Wettbewerbsvorteil zu bekommen."

GNU wird keine Betriebssystemsoftware aus dem Wettbewerb entfernen. Sie werden keinen Vorteil auf diesem Gebiet erzielen können, aber umgekehrt wird auch Ihre Konkurrenz Sie nicht übervorteilen können. Sie werden auf anderen Gebieten in Wettbewerb treten, während Sie auf diesem Gebiet voneinander profitieren werden. Wenn Ihr Unternehmen vom Verkauf eines Betriebssystems lebt, werden Sie GNU nicht mögen, aber das ist Ihr Problem. Wenn Ihr Unternehmen anders ist, kann GNU Sie davor bewahren, in das teure Geschäft gedrängt zu werden, Betriebssysteme zu verkaufen.

Ich würde es gerne sehen, wenn viele Hersteller und Benutzer die Entwicklung von GNU durch Spenden unterstützen würden, um die Kosten für jeden einzelnen zu senken.(6)

"Verdienen Programmierer nicht eine Belohnung für ihre Kreativität?"

Wenn irgendetwas eine Belohnung verdient, ist es sozialer Beitrag. Kreativität kann ein sozialer Beitrag sein, aber nur, wenn die Gesellschaft die Freiheit hat, die Resultate zu nutzen. Wenn Programmierer eine Belohnung für das Schreiben innovativer Programme verdienen, müssten sie aus demselben Grunde bestraft werden, wenn sie die Nutzung dieser Programme einschränken.

"Sollte ein Programmierer nicht eine Belohnung für seine Kreativität verlangen dürfen?"

Es ist nichts Schlechtes daran für Arbeit bezahlt zu werden oder sein Einkommen maximieren zu wollen, solange man nicht destruktiv wird. Die zur Zeit auf diesem Gebiet gebräuchlichen Mittel basieren auf einer Form von Zerstörung.

Geld von Benutzern zu kassieren, indem man den Gebrauch eines Programms einschränkt, ist destruktiv, weil die Beschränkungen die Häufigkeit und die Wege reduziert, in denen das Programm genutzt werden könnte. Dies reduziert den Reichtum, den die Menschheit aus dem Programm leitet. Ist die Beschränkung eine bewusste Entscheidung, sind die schädlichen Auswirkungen absichtliche Zerstörung.

Der Grund, weshalb ein guter Bürger keine solche destruktiven Mittel anwendet um reicher zu werden ist, dass, wenn dies jeder täte, wir alle durch die gegenseitige Destruktivität ärmer würden. Dies ist die Kantische Ethik, oder die Goldene Regel. Da mir die enstehenden Konsequenzen, wenn jeder Information hortet, nicht gefallen, bin ich verpflichtet es für falsch zu betrachten, wenn sich einer so verhält. Insbesondere der Wunsch für die eigene Kreativität belohnt zu werden, rechtfertigt nicht die Welt im allgemeinen von allen oder einem Teil dieser Kreativität zu berauben.

"Werden Programmierer nicht verhungern?"

Ich könnte antworten, dass niemand gezwungen ist, ein Programmierer zu sein. Die meisten von uns könnten nicht davon leben auf der Straße zu stehen und Grimassen zu schneiden. Aber wir sind deswegen noch lange nicht dazu verurteilt, unser Leben stehend auf der Straße zu verbringen, Grimassen schneidend und verhungernd. Wir tun etwas anderes.

Aber das ist die falsche Antwort, weil sie die implizite Annahme des Fragestellers akzeptiert: dass Programmierern ohne Eigentum an Software möglicherweise kein Cent bezahlt werden würde. Vermeintlich Alles oder Nichts.

Der wahre Grund, warum Programmierer nicht verhungern werden ist, dass es für sie immer noch möglich sein wird, für Programmierung bezahlt zu werden; nur halt nicht ganz so viel wie jetzt.

Eingeschränktes Kopieren ist nicht die einzige Grundlage für geschäftliche Software. Es ist die üblichste Basis(7), weil sie am meisten Geld einbringt. Wäre sie verboten oder durch Kunden abgelehnt, würde sich das Softwaregeschäft auf andere organisatorische Grundlagen bewegen, die zur Zeit weniger häufig verwendet werden. Es gibt immer viele Möglichkeiten, Geschäfte zu organisieren.

Vermutlich wird das Programmieren auf dieser neuen Grundlage nicht so lukrativ sein, wie es jetzt ist. Aber das ist kein Argument gegen die Änderung. Man betrachtet es im allgemeinen nicht als ungerecht, dass VerkäuferInnen die Gehälter bekommen, die sie bekommen. Würden Programmierer die gleichen Gehälter beziehen, wäre dies ebenfalls nicht ungerecht. (In der Praxis würden sie auch weiterhin deutlich mehr beziehen.)

"Haben Menschen nicht das Recht zu kontrollieren, wie ihre Ideen verwendet werden?"

"Die Kontrolle über die Verwendung eigener Ideen" konstituiert in Wirklichkeit die Kontrolle über das Leben anderer Menschen, und wird i. d. R. eingesetzt, um den Menschen das Leben zu erschweren.

Personen, die die Frage der Rechte am geistigen Eigentum(8) aufmerksam untersucht haben (z. B. Anwälte) sagen, dass es kein intrinsisches Recht auf geistiges Eigentum gibt. Die von der Regierung anerkannten Arten angeblicher Rechte am geistigen Eigentum wurden durch besondere Rechtsvorschriften für bestimmte Zwecke geschaffen.

Beispielsweise wurde das Patentsystem etabliert, um Erfinder zu ermutigen, die Details ihrer Erfindungen offen zu legen. Der Zweck war die Gesellschaft und nicht den Erfindern zu helfen. Zu jener Zeit war die Lebensdauer von 17 Jahren für ein Patent kurz verglichen mit der Geschwindigkeit des Fortschritts. Da Patente nur für Hersteller ein Thema sind, für die die Kosten und Aufwand eines Lizenzvertrages verglichen mit den Produktionskosten gering sind, schaden Patente oft nicht viel. Sie behindern die meisten Einzelpersonen, die patentierte Produkte benutzen, nicht.

Die Idee des Urheberrechts existierte früher nicht, als Autoren häufig andere Autoren in nicht-fiktionalen Werken kopierten. Diese Praxis war nützlich und der einzige Weg, Werke vieler Autoren haben sogar teilweise überlebt. Das Copyright-System wurde speziell zur Förderung der Urheberschaft erstellt. Auf dem Gebiet, für das es erfunden wurde – Bücher, die nur auf einer Druckerpresse ökonomisch vervielfältigt werden konnten ‑ schadete es wenig, und behindert dadurch die meisten Leser nicht.

Alle geistigen Eigentumsrechte sind nur von der Gesellschaft, zu Recht oder Unrecht, gewährte Lizenzen, weil sie glaubte, sie würde als Ganzes profitieren. In einer bestimmten Situation jedoch müssen wir uns fragen: Sind wir wirklich durch die Gewährung solcher Lizenzen besser gestellt? Welche Art der Handlung erlauben wir einer Person dadurch zu tun?

Der Fall von Programmen heute unterscheidet sich sehr von Büchern von vor hundert Jahren. Die Tatsache, dass der einfachste Weg, ein Programm zu kopieren, von einem Mitmenschen zum Nächsten ist, die Tatsache, dass ein Programm unterschiedlichen sowohl Quell- als auch Objektcode enthält und die Tatsache, dass ein Programm verwendet statt gelesen und genossen wird, bündeln sich, um eine Situation zu schaffen, in der eine Person, die ein Urheberrecht einfordert, der Gesellschaft als Ganzes sowohl materiell als auch spirituell schadet; eine Situation, in der eine Person kein Urheberrecht einfordern sollte, unabhängig davon, ob es das Recht ermöglicht.

"Wettbewerb bringt Dinge dazu, besser gemacht zu werden."

Das Paradigma von Wettbewerb ist ein Wettrennen: indem wir den Sieger belohnen, ermuntern wir jeden dazu, schneller zu laufen. Wenn Kapitalismus tatsächlich auf diese Weise funktioniert, ist es ein guter Job; aber seine Verteidiger haben Unrecht mit der Annahme, es funktioniere immer so. Wenn die Läufer vergessen, weshalb der Preis ausgesetzt wurde und unbedingt, egal wie, gewinnen wollen, entdecken sie vielleicht andere Strategien ‑ wie z. B. andere Läufer anzugreifen. Wenn die Läufer in einen Faustkampf geraten, werden sie alle den Lauf später beenden.

Proprietäre und geheime Software sind das moralische Äquivalent zu Läufern in einem Faustkampf. Traurig zu sagen, dass der einzige vorhandene Schiedsrichter, den wir bekommen haben, nichts gegen die Faustkämpfe einzuwenden hat; er reguliert sie lediglich („Pro gelaufene zehn Meter darf man einen Schuss abfeuern“). Er sollte sie stattdessen auseinanderbringen und Läufer bereits für den Versuch eines Angriffs bestrafen.

"Wird ohne finanziellen Ansporn nicht jeder aufhören zu programmieren?"

Tatsächlich werden viele Menschen absolut ohne jeden finanziellen Ansporn programmieren. Programmierung übt eine unwiderstehliche Anziehungskraft auf einige Menschen aus, in der Regel Menschen, die darin am besten sind. Es gibt keinen Mangel an professionellen Musikern, die am Ball bleiben, obwohl sie keine Hoffnung, haben ihren Lebensunterhalt zu bestreiten.

Aber tatsächlich ist diese Frage, obwohl häufig gestellt, der Situation nicht angemessen. Die Bezahlung für Programmierer wird nicht verschwinden, nur weniger werden. Die richtige Frage ist also, ob jemand mit einem reduzierten finanziellen Ansporn programmieren wird? Meine Erfahrung zeigt, dass sie werden.

Seit mehr als zehn Jahren haben viele der weltweit besten Programmierer im KI-Labor für weit weniger Geld gearbeitet, als sie anderswo hätten verdienen können. Sie erhielten nicht-finanzielle Belohnungen: Ruhm und Anerkennung, zum Beispiel. Und Kreativität ist auch Spaß, eine Belohnung in sich.

Dann gingen die meisten von ihnen, als sich eine Chance bot, dieselbe interessante Arbeit für viel Geld zu tun.

Die Tatsachen zeigen, dass Menschen aus anderen Gründen als Reichtum programmieren; aber wenn sich ihnen eine Chance bietet, mehr Geld zu verdienen, werden sie es zu Recht erwarten und auch einfordern. Niedrig zahlende Unternehmen sehen schlecht im Wettbewerb mit hoch zahlenden aus, müssen sich aber nicht schlecht machen, wenn hoch zahlende untersagt sind.

"Wir benötigen die Programmierer unbedingt. Wenn sie möchten, dass wir aufhören unseren Mitmenschen zu helfen, müssen wir folgen."

Sie können niemals so verzweifelt sein, dass Sie derartigen Forderungen nachgeben müssen. Vergessen Sie nicht: Millionen für die Verteidigung, aber nicht einen Cent für Anerkennung!

"Programmierer müssen von irgendetwas leben."

Kurzfristig ist das wahr. Es gibt jedoch viele Möglichkeiten, mit denen Programmierer Ihren Lebensunterhalt verdienen können, ohne den Verkauf von Programmrechten zu nutzen. Dieser Weg ist jetzt üblich, weil er Programmierern und Geschäftsleuten das meiste Geld einbringt und nicht, weil es der einzige Weg ist, seinen Lebensunterhalt zu verdienen. Es ist leicht, andere Wege zu finden, wenn man sie finden möchte. Hier sind einige Beispiele.

Ein Rechnerhersteller, der einen neuen Rechner einführt, zahlt für die Portierung des Betriebssystems auf die neue Hardware.

Programmierer können auch in der Schulung, der Benutzerhilfe und der Wartung beschäftigt werden.

Menschen mit neuen Ideen können Programme als Freeware(9) verbreiten, zufriedene Benutzer um Spenden bitten oder Dienstleistungen rentabel anbieten. Ich bin einigen Personen begegnet, die bereits erfolgreich auf diese Weise arbeiten.

Benutzer mit ähnlichen Bedürfnissen können Benutzergruppen bilden und Beiträge zahlen. Die Gruppe würde dann Programmierfirmen damit beauftragen, Programme zu schreiben, die die Mitglieder verwenden möchten.

Alle Arten der Entwicklung können mit einer Softwaresteuer finanziert werden:

Angenommen, jeder, der einen Rechner kauft, muss x Prozent des Preises als Softwaresteuer entrichten. Die Regierung gibt dieses Geld einer Agentur wie der National Science Foundation (NSF), um es für die Softwareentwicklung einzusetzen.

Wenn aber der Rechnerkäufer selbst für die Softwareentwicklung spendet, wird die Spende mit der Softwaresteuer verrechnet. Er kann für das Projekt seiner Wahl spenden ‑ häufig gewählt in der Hoffnung, die fertigen Ergebnisse verwenden zu können. Er kann eine Gutschrift für jeden Spendenbeitrag bis zur gesamten Steuerschuld, die er zu zahlen hatte, anrechnen lassen.

Der gesamte Steuersatz könnte durch ein Votum der Steuerzahler beschlossen werden, entsprechend dem auf sie zu besteuernden Betrag.

Die Konsequenzen:

    Die rechnernutzende Gemeinschaft unterstützt die Softwareentwicklung.
    Diese Gemeinschaft entscheidet, welches Niveau der Unterstützung erforderlich ist.
    Benutzer, denen es darauf ankommt, an welchen Projekten sie sich beteiligen, können dies selbst entscheiden.

Auf lange Sicht sind freie Programme ein Schritt in Richtung einer Welt ohne Mangel, in der niemand hart arbeiten muss, um den Lebensunterhalt zu verdienen. Die Menschen werden frei sein sich selbst Aktivitäten zu widmen, die Freude machen, wie der Programmierung, nach den geforderten zehn Wochenstunden notwendiger Aufgaben, wie beispielsweise Verwaltung, Familienberatung, Roboterreparatur und Asteroidenprospektierung. Es wird keine Notwendigkeit geben, von Programmierung zu leben.

Wir haben bereits die Menge an Arbeit, welche die Gesellschaft für ihre Produktivität aufbringen muss, gewaltig reduzieren können, aber nur ein kleiner Teil davon übertrug sich in mehr Freizeit für Arbeitnehmer, weil jede produktive Aktivität zwangsläufig von viel unproduktiver Aktivität begleitet wird. Die Hauptursachen dafür sind Bürokratie und gegenseitige Kämpfe gegen die Konkurrenz. Freie Software wird diese Auswüchse auf dem Gebiet der Softwareentwicklung stark reduzieren. Wir müssen so handeln, um technische Fortschritte in Sachen Produktivität zu erzielen, die sich in weniger Arbeit für uns alle äußern werden.
Fußnoten

    ↗ Diese Wortwahl war ein wenig sorglos. Die Absicht war, dass niemand für die Erlaubnis zahlen muss, das GNU-System zu benutzen. Dieses geht jedoch nicht aus der Formulierung hervor und man interpretiert dies häufig mit den Worten, dass Kopien von GNU stets ohne oder höchstens gegen geringes Entgelt verbreitet werden sollen. Dies war nie die Absicht; weiter unten erwähnt das Manifest die Möglichkeit der Erbringung von Vertriebsdienstleistungen für Unternehmen zur Gewinnerzielung. Anschließend habe ich gelernt, sorgfältig zwischen frei im Sinne von Freiheit und frei im Sinne von Preis zu unterscheiden. Freie Software ist Software, deren Benutzer die Freiheit haben, sie weiterzugeben und zu ändern. Einige werden ihre Kopien kostenlos erhalten, andere dafür bezahlen ‑ und wenn diese Gelder dazu beitragen, die Software weiter zu verbessern, um so besser. Wichtig ist, dass jedermann, der eine Kopie besitzt, auch die Freiheit beim Gebrauch dieser Kopie mit anderen zu kooperieren hat.
    ↗ Der Ausdruck verschenken ist ein weiteres Indiz dafür, dass ich noch nicht eindeutig die Frage von Preis und Freiheit getrennt hatte. Wir empfehlen nun dieser Ausdruck zu vermeiden, wenn es um Freie Software geht. Siehe Zu vermeidende Wörter für weitere Informationen.
    ↗ Dies ist eine weitere Stelle, an der ich versäumte, sorgfältig zwischen den beiden verschiedenen Bedeutungen von frei zu unterscheiden. Die Aussage ist so nicht falsch ‑ man kann Kopien von GNU-Software kostenlos von Freunden oder über das Internet erhalten. Aber es lässt auf die falsche Idee schließen.
    ↗ Inzwischen gibt es mehrere solcher Unternehmen.
    ↗ Obwohl es sich um eine wohltätige Einrichtung und nicht um ein Unternehmen handelt, hat die Free Software Foundation seit 10 Jahren den grössten Teil ihres Kapitals aus der Vertriebsdienstleistung eingenommen. Sie können Artikel von der FSF bestellen, um ihre Arbeit zu unterstützen.
    ↗ Eine Gruppe von Rechnerfirmen hat um 1991 Kapital angesammelt, um die Wartung des GNU C-Compilers zu unterstützen.
    ↗ Ich glaube, ich irrte mich zu sagen, dass proprietäre Software der häufigste Grund ist, um mit Software Geld zu verdienen. Es scheint, dass es tatsächlich das häufigste Geschäftsmodell wurde und die Entwicklung von benutzerdefinierter Software ist. Das bietet nicht die Möglichkeit Mieten einzunehmen, also muss das Unternehmen weiterhin die eigentliche Arbeit erledigen, um ständig Einnahmen zu haben. Das benutzerdefinierte Softwaregeschäft wird weiterhin, mehr oder weniger unverändert, in einer Freie-Software-Welt der freien Software existieren. Deshalb erwarte ich nicht, dass die meisten bezahlten Programmierer weniger in einer Welt der freien Software verdienen würden.
    ↗ In den 1980ern hatte ich noch nicht erkannt wie verwirrend es war von dem Problem bezüglich „Geistiges Eigentum“ zu sprechen. Dieser Begriff ist offensichtlich voreingenommen; subtiler ist die Tatsache, dass er verschiedene unterschiedliche Gesetze in einen Topf wirft, die sehr unterschiedliche Probleme aufwerfen. Heutzutage halte ich dazu an, den Begriff „Geistiges Eigentum“ völlig abzulehnen, damit es andere nicht zu der Annahme führt, dass diese Gesetze ein schlüssiges Problem lösen. Um dies eindeutig zu trennen, werden Patente, Urheberrechte und Warenzeichen gesondert erörtert. Siehe „Sagten Sie ‚Geistiges Eigentum‘? Eine verführerische Illusion“, wie dieser Begriff Verwechslungsgefahr und Voreingenommenheit verbreitet.
    ↗ Anschließend lernten wir zwischen Freie Software und Freeware zu unterscheiden. Der Begriff Freeware bezeichnet Software, die Sie frei weitergegeben können, aber in der Regel den Quellcode nicht frei untersuchen und ändern dürfen, daher größtenteils unfreie Software ist. Siehe Zu vermeidende Wörter für weitere Informationen.

https://www.gnu.org/philosophy/15-years-of-free-software.html
15 Jahre Freie Software

von Richard M. Stallman

Es sind nun etwas mehr als 15 Jahre seit Beginn der Freie-Software-Bewegung und dem GNU-Projekt vergangen. Wir haben einen langen Weg zurückgelegt.

Im Jahr 1984 war es unmöglich, einen modernen Rechner zu benutzen, ohne ein proprietäres Betriebssystem zu installieren, welches man nur mit einer beschränkenden Lizenz erhalten konnte. Niemand durfte Software frei mit anderen Rechnernutzern gemeinsam nutzen, und kaum jemand war in der Lage, die Software den eigenen Bedürfnissen anzupassen. Die Eigentümer der Software hatten Mauern errichtet, um uns voneinander zu trennen.

Das GNU-Projekt wurde gegründet, um all das zu ändern. Das erste Ziel: ein unixkompatibles, portables Betriebssystem entwickeln, das 100%ig freie Software sein würde. Nicht 95%ig, nicht 99,5%ig, sondern 100%ig – damit Nutzer frei sein würden, das gesamte System weiterzuvertreiben, zu ändern und daran mitzuarbeiten. Der Name des Systems, GNU, ist ein rekursives Akronym für GNU’s Nicht Unix ‚GNU’s Not Unix‘ –  eine Art Hommage an Unix, während zum anderen klar gemacht wird, dass GNU etwas anders ist. Technisch gesehen ist GNU wie Unix. Aber im Gegensatz zu Unix gibt GNU seinen Nutzern Freiheit.

Es dauerte viele Jahre der Arbeit, durch Hunderte von ProgrammiererInnen, dieses Betriebssystem zu entwickeln. Einige wurden von der Free Software Foundation und Freie-Software-Unternehmen bezahlt; die meisten waren Freiwillige. Einige wenige wurden berühmt; die meisten wurden vor allem innerhalb ihres Berufsstands, durch andere Hacker, die ihren Quellcode verwenden oder daran arbeiten, bekannt. Alle zusammen haben dazu beigetragen, das Potenzial des Rechnernetzes für die gesamte Menschheit zu befreien.

Im Jahr 1991 wurde die letzte große wesentliche Komponente eines unixartigen Systems entwickelt: Linux, der von Linus Torvalds geschriebene freie Betriebssystemkern. Heutzutage wird die Kombination von GNU und Linux von Millionen von Menschen auf der ganzen Welt genutzt, und seine Beliebtheit wächst. Diesen Monat haben wir die Veröffentlichung der Version 1.0 von GNOME, der grafischen Benutzeroberfläche von GNU, angekündigt, die hoffentlich die Bedienung des GNU/Linux-Systems so einfach machen wird, wie die jedes anderen Betriebssystems.

Aber unser Freiheit ist nicht dauerhaft gesichert. Die Welt steht nicht still, und wir können nicht damit rechnen, diese Freiheit auch noch in fünf Jahren zu haben, nur weil es heute so ist. Freie Software steht vor schwierigen Herausforderungen und Gefahren. Es bedarf zielgerichteter Anstrengungen, um unsere Freiheit zu bewahren, genauso wie es dauerte, die Freiheit in erster Linie zu erzielen. Mittlerweile ist das Betriebssystem nur der Anfang – nun müssen wir freie Anwendungen hinzufügen, um die gesamte Palette an Aufgaben abzudecken, die Nutzer erledigen möchten.

In zukünftigen Beiträgen werde ich über die genauen Herausforderungen, vor denen die Freie-Software-Gemeinschaft steht, und andere Fragen, die die Freiheit der Rechnernutzer ebenso wie die Entwicklungen, die das GNU/Linux-Betriebssystem beeinflussen, schreiben. 


https://www.gnu.org/gnu/why-programs-should-be-shared.html
Warum Programme mit anderen geteilt werden sollten

von Richard Stallman | 1983-05

    Dieser von Richard Stallman geschriebene Text wurde in einer auf Mai 1983 datierten Datei gefundenen, wenngleich nicht klar ist, ob seinerzeit oder noch früher geschrieben. Im Mai 1983 schmiedete Stallman private Pläne ein freies Betriebssystem zu entwickeln, er konnte sich aber noch nicht dafür entschieden haben, ob es einem unixoiden System oder so etwas wie dem MIT Lisp-Rechner entspricht.

    Die beiden englischsprachigen Bedeutungen von Free wurden noch nicht begrifflich unterschieden. Diese Aussage ist deshalb auf gratis Kopien bezogen formuliert, allerdings als selbstverständlich betrachtend, dass das bedeutet, dass Nutzer auch Freiheit haben.

Vor fünf Jahren konnte man als selbstverständlich voraussetzen, dass jedes nützliche Programm, das an Stanford AI Laboratory (SAIL), Massachusetts Institute of Technology (MIT), Carnegie Mellon University (CMU) usw. geschrieben wurde, weitergegeben würde. Seither haben diese Universitäten angefangen ebenso wie Softwarehäuser zu handeln ‑ alles Nützliche wird gegen eine schöne Stange Geld verkauft (gewöhnlich nachdem auf Staatskosten geschrieben).

Menschen suchen alle möglichen Ausreden warum es schädlich sei Software wegzugeben. Diese vermeintlichen Probleme haben uns nie sonderlich gestört als wir teilen wollten und haben EMACS nicht betroffen, ich vermute also sie sind erfunden.

Beispielsweise wird gesagt, dass Firmen sie „stehlen“ und verkaufen werden. Wenn dem so ist, wäre das nicht schlechter als würde Stanford sie verkaufen! Zumindest würde man die Alternative haben ein Gratisexemplar zu erhalten. Nutzer möchten betreute Software kaufen? Dann sollen man Dienstleistungsverträge verkaufen  ‑die Software selbst jedoch gratis abgeben.

Ich denke, ich kann Gründe zurechtlegen, bei denen man annehmen könnte keine Software gemeinsam auszutauschen. Wichtiger jedoch ist der Grund, warum wir weitergeben sollten:

Wir bekämen mit demselben Arbeitsaufwand mehr erledigt, wenn künstliche Hindernisse beseitigt wären. Und wir würden mehr im Einklang mit allen anderen stehen.

Gemeinsamer Softwareaustausch ist auf dem Gebiet der Informatik die Form der wissenschaftlichen Zusammenarbeit. Universitäten pflegten das Prinzip wissenschaftlicher Zusammenarbeit zu verteidigen. Ist es für sie richtig, es für Profit über den Haufen zu werfen?

Sollten wir sie lassen?

Derzeit arbeiten hier Graduierte daran Projekte zu programmieren, die ausdrücklich zum Verkauf bestimmt sind. Wenn wir aber ein Meinungsklima wie das von vor fünf Jahren schaffen, würde die Universität nicht wagen, dies zu tun. Und, wenn man anfängt zu teilen, könnten andere anfangen mit einem zu teilen.

Fangen wir also wieder mit dem gemeinsamen Austauschen an.


https://www.gnu.org/gnu/yes-give-it-away.html
Also, lasst uns wieder anfangen zu teilen

von Richard Stallman

    Dieser Text wurde in einer auf Mai 1983 datierten Datei gefunden, wenngleich nicht klar ist, ob seinerzeit oder noch früher geschrieben. Im Mai 1983 wurden private Pläne geschmiedet ein freies Betriebssystem zu entwickeln. Ob es sich dabei um ein unixoides System oder um so etwas wie dem MIT Lisp-Rechner handelt, kann zu diesem Zeitpunkt noch nicht festgestanden haben.

    Die beiden englischsprachigen Bedeutungen von Free[*] wurden noch nicht begrifflich unterschieden. Diese Aussage ist deshalb auf kostenlose Kopien bezogen formuliert, dies aber als selbstverständlich betrachtend, dass das bedeutet, dass Nutzer auch Freiheit haben.

Einer der wichtigen Beweggründe Software uneingeschränkt abzugeben ist Nutzern die Möglichkeit zu geben, sie zu ändern. Dies ermöglicht es ihnen sie besser zu nutzen und fördert und ermöglicht ihnen auch zu den Bemühungen beizutragen. Darüber hinaus entwickeln sie Selbständigkeit, Selbstvertrauen und Verantwortungsbewusstsein.

Ich habe oft gehört, dass Amerikaner denken sollen, dass etwas wertlos sei, wenn es kostenlos ist. Es mag wahr sein, ist aber nicht rational. Man hat ein Recht darauf neurotisch zu sein, wir sollten das aber nicht fördern. In der Zwischenzeit wird das Weggeben von Software gerade nicht „sie als wertlos zu behandeln“, nur weil einige Masochisten zu dem Schluss kommen könnten, dass sie wertlos sei.

Nutzer würden Software nicht ändern, wenn sie wertlos wäre. Vielmehr, weil es ihnen mehr Wert ist als sie zuvor geändert wurde. Ein wenig zentrale Betreuung ist auch sinnvoll, aber es gibt andere Möglichkeiten dies zu erreichen, abgesehen davon Nutzer zu bedrängen.

Ich habe viel Erfahrung mit dem Teilen von Software und habe sie Nutzer ändern lassen. Ich denke, dass

    es wenig Neigung gibt zu glauben, EMACS sei wertlos;
    Nutzer EMACS häufig ändern;
    Nutzeränderungen zur EMACS-Entwicklung beitragen;
    die zentrale Betreuung von EMACS fortwährt.

Ich ging auf Nutzer in einem nicht-manipulativen kooperativen Geist zu, und sie reagierten enthusiastisch und kooperativ. Als ich erklärte, dass Beschränkungen auferlegt werden, um ihre Neurosen zu überlisten oder weil im Voraus angenommen wird, sie seien inkompetent, empfanden sie berechtigten Groll. Sie neigten auch dazu im Ergebnis inkompetent und neurotisch zu werden.


https://www.gnu.org/gnu/linux-and-gnu.html
Das GNU-System und Linux

von Richard Stallman

    Siehe auch GNU/Linux: Häufig gestellte Fragen und GNU/Linux. Ist der Name Schall und Rauch? für weitere Informationen.

Viele Rechnernutzer führen tagtäglich eine modifizierte Version des GNU-Systems aus ‑ ohne es zu wissen. Durch eine befremdende Wendung der Ereignisse wird dieses System ‑ das heute weit verbreitet ist ‑ oft unzutreffend „Linux“ genannt, und viele Nutzer sind sich dessen nicht bewusst, dass es im Grunde das GNU-System ist, entwickelt durch das GNU-Projekt.

Es gibt wahrhaft ein Linux, und diese Menschen benutzen es, aber es ist nur ein Teil des Systems, das sie benutzen. Linux ist der Betriebssystemkern: das Programm im System, das die Ressourcen des Systems an die anderen Programme zuteilt. Der Systemkern ist ein wesentlicher Bestandteil eines Betriebssystems, für sich genommen aber nutzlos; er kann nur im Kontext mit einem kompletten Betriebssystem funktionieren. Linux wird üblicherweise in Kombination mit dem GNU-Betriebssystem genutzt: das ganze System ist grundsätzlich GNU mit hinzugefügtem Linux ‑ oder GNU/Linux. All die sogenannten „Linux“-Distributionen sind tatsächlich GNU/Linux-Distributionen.

Viele Benutzer verstehen den Unterschied zwischen dem Systemkern, der Linux ist, und dem Gesamtsystem, den sie auch „Linux“ nennen, nicht. Der mehrdeutige Gebrauch des Namens trägt nicht zum Verständnis bei. Diese Benutzer denken oftmals, dass Linus Torvalds das gesamte Betriebssystem 1991 mit ein bisschen Hilfe entwickelte.

Programmierer wissen für gewöhnlich, dass Linux ein Systemkern ist. Da sie aber im Allgemeinen ebenso selbstverständlich „Linux“ als Gesamtsystem gehört haben, stellen sie sich oft eine Geschichte vor, die die Benennung des Gesamtsystems nach dem Systemkern rechtfertigen würde. Beispielsweise sind viele davon überzeugt, dass, sobald Linus Torvalds das Schreiben an Linux, dem Systemkern, abschließen würde, sich seine Nutzer nach anderer freier Software umgucken würden, um dann diese weiter zu nutzen, und fanden heraus, dass (aus keinem besonderen Grund) fast alles für ein unixoides System Notwendige bereits vorhanden war.

Was sie vorfanden war kein Zufall ‑ es war das (noch unvollständige) GNU-System. Die verfügbare Freie Software trug zu einem Komplettsystem bei, weil das GNU-Projekt seit 1984 an einem gearbeitet hatte. Im GNU-Manifest erklärten wir das Ziel, ein freies, unixoides System namens GNU[1] zu entwickeln. Die ursprüngliche Ankündigung des GNU-Projekts umreißt auch einige der ursprünglichen Pläne für das GNU-System. Als mit Linux begonnen wurde, war GNU fast fertig.

Die meisten Freie-Software-Projekte haben das Ziel, ein bestimmtes Programm für eine bestimmte Aufgabe zu entwickeln. Beispielsweise hat sich Linus Torvalds vorgenommen, einen unixoiden Systemkern (Linux) zu schreiben, Donald Knuth ein Textsatzprogramm (TeX) und Bob Scheifler ein Fenstersystem (das X Window System). Es ist nur natürlich, den Beitrag dieser Art von Projekt an bestimmten Programmen zu messen, die daraus stammen.

Zu welchem Schluss würden wir bei dem Versuch kommen, den Beitrag des GNU-Projekts danach zu messen? Ein CD-ROM-Anbieter fand heraus, dass in deren „Linux-Distribution“ GNU-Software mit etwa 28 % der größte einzelne Anteil des gesamten Quellcodes war. Und das schloss einige der unverzichtbaren Hauptkomponenten, ohne die es überhaupt kein System geben würde, ein. Linux selbst machte ungefähr 3 % aus (2008 sind die Anteile ähnlich: im Haupt-Projektarchiv von gNewSense Linux 1,5 % und GNU-Pakete 15 %). Wenn man also vor hätte einen Namen für das System basierend darauf auszuwählen, wer die Programme im System geschrieben hat, wäre die entsprechende einzige Antwort GNU.

Aber das ist nicht der richtige Weg die Angelegenheit zu beurteilen. Das GNU-Projekt war und ist kein Projekt, bestimmte Softwarepakete zu entwickeln. Es war kein Projekt, einen C-Compiler zu entwickeln, obgleich wir das taten. Es war kein Projekt, einen Texteditor zu entwickeln, obgleich wir einen entwickelten. Das GNU-Projekt hat sich vorgenommen, ein vollständig freies unixoides System zu entwickeln: GNU.

Viele haben maßgebliche Beiträge zu der freien Software im System geleistet, und sie alle verdienen Anerkennung für ihre Software. Aber der Grund, weshalb es ein integriertes System ‑ und nicht nur eine Sammlung nützlicher Programme ‑ ist, ist der, weil sich das GNU-Projekt vorgenommen hat, es zu einem zu machen. Wir fertigten eine Liste der benötigten Programme an, um ein vollständiges freies System zu entwickeln, und systematisch fanden, schrieben oder fanden wir Personen, alles auf die Liste zu schreiben. Wir schrieben wesentliche, aber wenig aufregende Komponenten(1), da man ohne sie kein System haben kann. Einige unserer Systemkomponenten, die Programmierwerkzeuge, wurden unter Programmierern eigenständig populär, aber wir schrieben auch viele Komponenten, die keine Werkzeuge(2) sind. Wir entwickelten sogar ein Schachspiel, GNU Chess, weil ein Gesamtsystem auch Spiele braucht.

Anfang der 90er hatten wir das gesamte System, abgesehen vom Systemkern, zusammengestellt. Wir arbeiteten ebenfalls an einem Systemkern, dem GNU Hurd, der auf Mach aufsetzt. Die Entwicklung dieses Systemkerns ist sehr viel schwieriger gewesen als wir angenommen hatten. GNU Hurd begann zwar 2001 zuverlässig zu arbeiten, aber ist weit davon entfernt, allgemein benutzbar zu sein.

Glücklicherweise mussten wir wegen Linux nicht auf Hurd warten. Nachdem Torvalds im Jahr 1992 Linux freigegebenen hatte, füllte es die letzte große Lücke im GNU-System. Man konnte dann das GNU-System mit Linux kombinieren, um ein vollständig freies System zu erhalten ‑ eine Variante des GNU-Systems, das auch Linux enthielt. Mit anderen Worten: das GNU/Linux-System.

Damit sie gut zusammenarbeiten, war keine triviale Aufgabe. Einige GNU-Komponenten(3) benötigten eine wesentliche Änderung, um mit Linux zu funktionieren. Die Integration eines kompletten Systems zu einer Distribution, die sofort einsatzbereit sein würde, war ebenfalls eine große Aufgabe. Es musste die Frage gelöst werden, wie man das System installiert und startet ‑ ein Problem, dass wir noch nicht angepackt hatten, weil wir diesen Punkt noch nicht erreicht hatten. Daher leisteten die Personen, die verschiedene Systemdistributionen entwickelt haben, sehr viel maßgebliche Arbeit. Aber es war Arbeit, die ‑ in der Natur der Sache ‑ sicher war, von jemand erledigt zu werden.

Das GNU-Projekt unterstützt sowohl GNU-Systeme mit Linux, GNU/Linux, als auch das GNU-System. Die Free Software Foundation (FSF) unterstützte die Überarbeitung der Linux-bedingten Erweiterungen zur GNU C-Bibliothek finanziell, sodass diese nun gut integriert und die neuesten GNU/Linux-Systeme die aktuelle Freigabe der Bibliothek unverändert nutzen können. Die FSF unterstützte auch ein frühes Entwicklungsstadium von Debian GNU/Linux finanziell.

Gegenwärtig gibt es viele verschiedene Varianten des GNU/Linux-Systems (vielfach Distributionen genannt). Die meisten enthalten unfreie Software ‑ deren Entwickler eher der mit „Linux“ anstatt der von GNU verbundenen Philosophie folgen. Aber es gibt auch völlig freie GNU/Linux-Distributionen. Die FSF unterstützt gNewSense mit EDV-Fa­zi­li­täten.

Eine freie GNU/Linux-Distribution ist nicht nur eine Frage der Beseitigung verschiedener unfreier Programme. Heutzutage enthält die übliche Version von Linux auch unfreie Programme. Diese Programme sollen beim Start des Systems in Ein-/Ausgabegeräte geladen werden und sind als lange Zahlenreihen im „Quellcode“ von Linux enthalten. Somit beinhaltet die Pflege freier GNU/Linux-Distributionen nun ebenfalls die Pflege einer freien Variante von Linux.

Ob Sie GNU/Linux benutzen oder nicht, bitte irritieren Sie die Öffentlichkeit nicht durch doppeldeutigen Gebrauch des Namens „Linux“. Linux ist der Betriebssystemkern, einer der unbedingt erforderlichen Hauptkomponenten des Systems. Das System als Ganzes ist grundsätzlich das GNU-System mit hinzugefügtem Linux. Wenn Sie über diese Kombination sprechen, nennen Sie es bitte GNU/Linux.

Möchten Sie zu Referenzzwecken einen Verweis auf GNU/Linux anlegen, ist sowohl dieses Dokument als auch https://www.gnu.org/gnu/the-gnu-project.html eine gute Wahl. Möchten Sie Linux, den Betriebssystemkern, erwähnen und einen Verweis für weitere Referenz hinzufügen, ist http://foldoc.org/linux eine gute Adresse.
Nachtrag

Abgesehen von GNU hat ein anderes Projekt unabhängig ein freies unixoides Betriebssystem hergestellt. Dieses System ist als BSD bekannt und wurde an der University of California, Berkeley, entwickelt. In den 80ern war es unfrei, wurde aber Anfang der 90er frei. Ein gegenwärtig existierendes freies Betriebssystem(4) ist höchstwahrscheinlich entweder eine Variante des GNU-Systems oder eine Art von BSD-System.

Manchmal wird angefragt, ob BSD auch eine Variante von GNU sei, wie GNU/Linux. Die BSD-Entwickler wurden angeregt, ihren Quellcode am Beispiel des GNU-Projekts zu Freie Software zu machen, und nachdrückliche Appelle von GNU-Aktivisten halfen sie zu überzeugen, aber der Quellcode hatte kaum Überschneidungen mit GNU. BSD-Systeme nutzen heute einige GNU-Programme wie das GNU-System und seine Varianten ebenso einige BSD-Programme nutzen. Allerdings, als Ganzes betrachtet, sind sie zwei verschiedene Systeme, die separat entwickelt wurden. Die BSD-Entwickler schrieben keinen Systemkern und fügten diesen dem GNU-System hinzu, daher würde ein Name wie GNU/BSD der Situation(5) nicht gerecht werden.


https://www.gnu.org/gnu/why-gnu-linux.html
GNU/Linux. Ist der Name Schall und Rauch?

von Richard Stallman

    Weitere Informationen zu diesem Thema finden Sie unter GNU/Linux: Häufig gestellte Fragen, Das GNU-System und Linux, eine Historie des GNU/Linux-Systems und wie es zur Benennung kam, sowie GNU-Nutzer, die noch nie von GNU gehört haben. 

Namen vermitteln Bedeutungen; die Wahl der Namen bestimmt die Bedeutung dessen, was wir sagen. Ein unangebrachter Name vermittelt eine falsche Vorstellung. Eine Rose würde mit einem anderen Namen ebenso süß duften – aber wenn man sie einen Stift nennt, werden die Menschen, die versuchen damit zu schreiben, ziemlich enttäuscht sein. Und wenn man Stifte „Rosen“ nennt, kann man nicht erkennen, wofür sie gut sind. Wenn man unser Betriebssystem „Linux“ nennt, vermittelt das eine falsche Vorstellung über Herkunft, Geschichte und Ziele des Systems. Wenn man es GNU/Linux nennt, vermittelt das (wenn auch nicht im Detail) eine genauere Vorstellung.

Ist dies wirklich für unsere Gemeinschaft wichtig? Ist es wichtig, ob Herkunft, Geschichte und Ziele bekannt sind? Ja, weil Menschen, die Geschichte vergessen, oft dazu verdammt sind, sie zu wiederholen. Die freie Welt, die sich um GNU/Linux entwickelt hat, ist nicht sicher genug, um zu überleben. Die Probleme, die uns zur Entwicklung von GNU veranlasst haben, sind nicht völlig ausgerottet und drohen sich zu wiederholen.

Wenn ich erkläre, warum es angebracht ist das Betriebssystem eher GNU/Linux als „Linux“ zu nennen, wird manchmal so reagiert:

    "Angenommen, dass das GNU-Projekt Anerkennung für diese Arbeit verdienen würde, ist es wirklich dieses Theater wert, wenn Anwender keine Anerkennung zollen? Ist nicht das Wichtigste, dass die Arbeit gemacht wurde, nicht wer? Sie sollten sich entspannen, stolz auf die geleistete Arbeit sein und sich um Anerkennung keine Sorgen machen." 

Das wäre ein kluger Ratschlag, wenn er nur der Situation entsprechen würde – wenn die Arbeit schon erledigt und Zeit zum Entspannen wäre. Wenn das nur wahr wäre! Aber es gibt reichlich Herausforderungen, und dies ist nicht die Zeit, die Zukunft als selbstverständlich zu betrachten. Die Stärke unserer Gemeinschaft beruht auf Engagement für Freiheit und Zusammenarbeit. Den Namen GNU/Linux zu benutzen ist eine Möglichkeit sich daran zu erinnern und andere über die Ziele zu informieren.

Es ist möglich, gute Freie Software zu schreiben, ohne an GNU zu denken; viel gute Arbeit wurde auch im Namen von Linux geleistet. Aber der Begriff Linux wurde schon immer mit einer Philosophie geprägt, die keine Verpflichtung zur Freiheit zusammenzuarbeiten übernimmt. Da der Name zunehmend von Unternehmen verwendet wird, werden wir sogar noch mehr Schwierigkeiten haben, ihn mit Gemeinschaftsgeist in Verbindung zu bringen.

Eine große Herausforderung für die Zukunft freier Software kommt tendenziell von „Linux“-Distributoren, die unfreie Software im Namen von Benutzerfreundlichkeit und Leistung zu GNU/Linux hinzufügen. Alle großen kommerziellen Distributionen tun dies, keine beschränkt sich auf Freie Software. Die meisten kennzeichnen die unfreien Pakete nicht eindeutig genug. Viele entwickeln sogar unfreie Software und fügen sie dem System hinzu. Einige werben unverschämt für „Linux“-Systeme, die pro Einzelplatz lizenziert werden, die dem Nutzer ebenso viel Freiheit wie Microsoft Windows geben.

Man versucht das Hinzufügen unfreier Software im Namen der „Popularität von Linux“ zu rechtfertigen ‑ Beliebtheit tatsächlich über Freiheit wertschätzend. Manchmal wird das offen zugegeben. Beispielsweise The Wired Magazine, dass Robert McMillan, Chefredakteur The Linux Magazine, „findet, dass die Bewegung in Richtung Open-Source-Software durch technische anstatt politische Entscheidungen angetrieben werden sollte.“ Und Calderas Vorstandsvorsitzender nötigte Benutzer offen, das Ziel Freiheit fallen zu lassen und sich stattdessen für die „Beliebtheit von Linux“ einzusetzen.

Dem GNU/Linux-System unfreie Software hinzuzufügen kann zwar die Popularität erhöhen, sofern unter Popularität die Zahl der Nutzer gemeint ist, die irgendetwas von GNU/Linux in Kombination mit unfreier Software benutzen. Gleichzeitig fördert es jedoch die Gemeinschaft indirekt, unfreie Software als eine gute Sache zu akzeptieren und das Ziel, Freiheit, aus den Augen zu verlieren. Es ist nicht gut schneller zu fahren, wenn man nicht auf der Straße bleiben kann.

Wenn die unfreie „Erweiterung“ eine Bibliothek oder ein Programmierwerkzeug ist, kann es eine Falle für Freie-Software-Entwickler werden. Schreiben sie Freie Software, die von einem unfreien Paket abhängt, kann sie nicht Teil eines vollständig freien Systems sein. Motif und Qt lockten in der Vergangenheit im großen Maße Freie Software auf diese Weise in die Falle und verursachten Probleme, deren Lösungen Jahre dauerte. Motif blieb so etwas wie ein Problem, bis es obsolet und nicht mehr verwendet wurde. Suns spätere unfreie Java-Umsetzung hatte eine ähnliche Wirkung: die glücklicherweise nun größtenteils korrigierte Java-Falle.

Wenn sich unsere Gemeinschaft weiterhin in diese Richtung bewegt, könnte es die Zukunft von GNU/Linux in ein Mosaik aus freien und unfreien Komponenten umleiten. In fünf Jahren wird es sicherlich noch eine Menge Freie Software geben. Wenn wir aber nicht aufpassen, wird sie kaum ohne die unfreie Software einsetzbar sein, die Nutzer mit ihr vorzufinden erwarten. Wenn dies geschieht, wird unser Kampf für Freiheit fehlgeschlagen sein.

Wäre die Freigabe freier Alternativen nur eine Frage der Programmierung, könnte die Lösung künftiger Probleme einfacher werden, als die Entwicklungsressourcen unserer Gemeinschaft zu erhöhen. Aber wir sehen uns mit Hindernissen konfrontiert, die drohen, dieses schwerer zu machen: Gesetze, die Freie Software verbieten. Da sich Softwarepatente auftürmen und Gesetze wie das Digital Millennium Copyright Act (DMCA)[1] verwendet werden, um die Freie-Software-Entwicklung für wichtige Aufgaben wie dem Betrachten einer DVD oder Anhören eines RealAudio-Datenstroms zu verbieten, finden wir keinen eindeutigen Weg, die patentierten und geheimen Dateiformate zu bekämpfen, außer die unfreien Programme zurückzuweisen, die diese nutzen.

Die Bewältigung dieser Herausforderungen erfordert viele unterschiedliche Arten von Erfolg. Was wir aber vor allem brauchen, um jeder Herausforderung gegenüberzutreten, ist, sich an das Ziel der Freiheit zusammenzuarbeiten zu erinnern. Wir können nicht erwarten, dass der bloße Wunsch nach leistungsfähiger und zuverlässiger Software Menschen motivieren große Anstrengungen zu unternehmen. Wir brauchen die Art von Entschlossenheit, die Menschen haben, wenn sie für ihre Freiheit und ihre Gemeinschaft kämpfen – Entschlossenheit für Jahre fortzufahren und nicht aufzugeben.

In unserer Gemeinschaft gehen diese Ziele und diese Entschlossenheit hauptsächlich vom GNU-Projekt aus. Wir sind diejenigen, die über Freiheit und Gemeinschaft als etwas sprechen, um entschieden dafür einzutreten. Unternehmen, die von „Linux“ sprechen, sagen das normalerweise nicht. Die Magazine über „Linux“ sind normalerweise voll von Inseraten für unfreie Software.; „Linux“-Distributoren fügen unfreie Software zum System hinzu; andere Unternehmen „unterstützen Linux“ durch Entwickeln von unfreien Anwendungen, die unter GNU/Linux ausgeführt werden; „Linux“-Benutzergruppen laden typischerweise Vertriebler ein, um solche Anwendungen vorzustellen. Der wichtigste Ort in unserer Gemeinschaft, an dem man wahrscheinlich dem Gedanken von Freiheit und Entschlossenheit begegnet, ist das GNU-Projekt.

Aber wenn man dem begegnet, wird man das Gefühl haben, dass es sich auf einen selbst bezieht?

Menschen, die wissen, dass sie ein System benutzen, das aus dem GNU-Projekt hervorging, können eine direkte Beziehung zwischen sich selbst und GNU sehen. Sie stimmen nicht automatisch mit unserer Philosophie überein, aber sehen zumindest einen Grund, ernsthaft darüber nachzudenken. Im Gegensatz dazu verspüren die Menschen, die sich als „Linux-Nutzer“ betrachten und glauben, dass das GNU-Projekt „Werkzeuge entwickelte, die sich unter ‚Linux‘ als nützlich erwiesen haben", typischerweise nur eine indirekte Beziehung zwischen GNU und sich selbst. Sie können die GNU-Philosophie einfach ignorieren, wenn sie ihr begegnen.

Das GNU-Projekt ist idealistisch, und jeder, der heute Idealismus fördert, steht einem großen Hindernis gegenüber: die vorherrschende Ideologie ermutigt dazu, Idealismus als „unpraktisch“ abzutun. Unser Idealismus ist äußerst praktisch gewesen: es ist der Grund, warum wir ein freies GNU/Linux-Betriebssystem haben. Menschen, die dieses System lieben, sollten wissen, dass es unser wahr gemachter Idealismus ist.

Wenn „die Arbeit“ wirklich schon getan wäre, wenn nichts außer Anerkennung auf dem Spiel steht, wäre es vielleicht klüger, die Sache fallen zu lassen. Aber in dieser Position befinden wir uns nicht. Um Menschen für die Aufgabe zu inspirieren, die getan werden muss, müssen wir dafür anerkannt werden, was wir bereits geleistet haben. Bitte helfen Sie uns, indem Sie das Betriebssystem GNU/Linux nennen.


https://www.gnu.org/gnu/gnu-users-never-heard-of-gnu.html
GNU-Benutzer, die noch nie von GNU gehört haben

von Richard Stallman

    Um weitere Informationen zu diesem Thema zu erhalten, siehe GNU/Linux: Häufig gestellte Fragen, GNU/Linux. Ist der Name Schall und Rauch? und Das GNU-System und Linux. 

Die meisten Menschen haben noch nie von GNU gehört. Selbst die, die das GNU-System nutzen, haben noch nie von GNU gehört, da so viele Menschen und Unternehmen ihnen lehren, es „Linux“ zu nennen. Tatsächlich sagen GNU-Nutzer häufig, sie würden „Linux ausführen“, was ist, als würde man „seinen Vergaser fahren" oder „sein Getriebe fahren" sagen.

Trotz alledem assoziieren es diejenigen, die von GNU wissen, mit den Idealen von Freiheit der Freie-Software-Bewegung. Diese Assoziation kommt nicht von ungefähr. Der Beweggrund für die Entwicklung von GNU war insbesondere zu ermöglichen, einen Rechner benutzen zu können und Freiheit zu haben.

Eine Person, die den Namen GNU zum ersten Mal in GNU/Linux bemerkt, wird nicht sofort wissen was er verkörpert, ist aber ein Schritt näher gekommen es herauszufinden. Der Zusammenhang zwischen dem Namen GNU und unseren Zielen von Freiheit und sozialer Solidarität existiert in den Köpfen Hunderttausender GNU/Linux-Nutzer, die GNU kennen. Es existiert auf GNU.org und der Wikipedia. Es ist im gesamten Internet existent; suchen diese Nutzer nach GNU, finden sie die Ideale, für die GNU steht.

Wenn sie nicht danach suchen, können sie dennoch darauf stoßen. Die „Open-Source“-Rhetorik tendiert dazu, die Aufmerksamkeit weg von Fragen der Freiheit des Benutzers zu führen, aber nicht völlig. Es gibt noch immer Diskussionen über GNU und Freie Software, und man hat eine gewisse Chance darauf zu stoßen. Wenn das geschieht, achten sie wahrscheinlich eher auf Informationen über GNU (wie z. B..das ist das Werk einer Aktion für Freiheit und Gemeinschaft), wenn sie wissen, sie sind Nutzer des GNU-Systems.

Im Laufe der Zeit verbreitet die Nennung des Systems GNU/Linux das Bewusstsein für die Ideale der Freiheit, für die wir das GNU-Systems entwickelten. Es ist auch als Erinnerung für die Menschen in unserer Gemeinschaft nützlich, die von diesen Idealen wissen, in einer Welt, in der ein Großteil der Diskussion um Freie Software einen ganz praktischen (und damit unmoralischen) Ansatz hat. Wenn wir Sie darum bitten, das System GNU/Linux zu nennen, bitten wir Sie um Hilfe bei der Sensibilisierung der Öffentlichkeit für die Freie-Software-ideale.


https://www.gnu.org/gnu/gnu-linux-faq.html

Warum wird das benutzte System GNU/Linux genannt, nicht „Linux“? (#why)
    Die meisten Betriebssystem-Distributionen, die auf Linux als Betriebssystemkern beruhen, sind im Grunde modifizierte Varianten des Betriebssystems GNU. Wir begannen 1984 mit der Entwicklung von GNU, Jahre bevor Linus Torvalds seinen Betriebssystemkern anfing zu schreiben. Unser Ziel war ein komplett freies Betriebssystem zu entwickeln. Natürlich wurden nicht alle Teile selbst entwickelt ‑ aber wir hatten eine Vorreiterrolle. Wir entwickelten die meisten der zentralen Komponenten, die den größten Einzelbeitrag zum Gesamtsystem bildeten. Die grundlegende Vision war ebenfalls unsere.

    Der Fairness halber sollten wir wenigstens die gleiche Erwähnung bekommen.

    Siehe Das GNU-System und Linux und GNU-Nutzer, die noch nie von GNU gehört haben für weiterführende Erklärungen und Über das Projekt ‚GNU‘ zur Historie.
Warum ist der Name wichtig? (#whycare)
    Obwohl die Entwickler von Linux, dem Betriebssystemkern, zur Freie-Software-Gemeinschaft beitragen, interessieren sich viele von ihnen nicht für Freiheit. Menschen, die das Gesamtsystem für „Linux“ halten, neigen dazu, verwirrt zu sein und weisen jenen Entwicklern eine Rolle in der Geschichte unserer Gemeinschaft zu, die sie eigentlich gar nicht gespielt haben. Dann schenken sie den Ansichten jener Entwickler eine übermäßige Bedeutung.

    Das System GNU/Linux zu nennen erkennt die Rolle, die unser Idealismus beim Aufbau unserer Gemeinschaft gespielt hat, an und hilft der Öffentlichkeit die praktische Bedeutung dieser Ideale zu erkennen.
Was ist die wahre Beziehung zwischen GNU und Linux? (#what)
    Das GNU-Betriebssystem und der Linux-Kern sind separate Softwareprojekte, die ergänzende Aufgaben erledigen. Typischerweise werden sie in einer GNU/Linux-Distribution verpackt und gemeinsam eingesetzt.
Wie kam es dazu, dass die meisten Menschen das System „Linux“ nennen? (#howerror)
    Das System „Linux“ zu nennen ist ein Verwirrspiel, das sich schneller verbreitet hat als die korrigierende Information.

    Die Leute, die Linux mit dem GNU-System kombinierten, waren sich nicht bewusst, dass es das ist, worauf ihre Tätigkeit hinauslaufen würde. Sie richteten ihre Aufmerksamkeit auf das Stück, das Linux war, und realisierten nicht, dass die Kombination mehr aus GNU bestand. Sie fingen an, das System „Linux“ zu nennen, obwohl dieser Name nicht zu dem passte, was sie hatten. Es dauerte einige Jahre um zu erkennen, was das für ein Problem war und um dann zu bitten, die Gewohnheit zu korrigieren. Bis dahin hatte das Durcheinander schon einen großen Vorsprung.

    Die meisten Menschen, die das System „Linux“ nennen, haben noch nie gehört, warum das nicht Richtig ist. Sie sahen andere diesen Namen verwenden und gingen davon aus, er müsste richtig sein. Der Name „Linux“ verbreitet auch ein falsches Bild des Systemursprungs, weil man zu der Annahme neigt, die Systemgeschichte sei so gewesen, wie sie auf diesem Namen passt. Beispielsweise wird häufig angenommen, die Entwicklung von Linus Torvalds hätte 1991 begonnen. Dieses falsche Bild neigt die Idee zu verstärken, dass das System „Linux“ genannt werden sollte.

    Viele der hier gestellten Fragen stellen Versuche dar, den Namen zu rechtfertigen, den Benutzer gewohnt sind zu verwenden.
Sollte immer GNU/Linux statt „Linux“ gesagt werden? (#always)
    Nicht immer ‑ nur, wenn man über das Gesamtsystem spricht. Bezieht man sich konkret auf den Betriebssystemkern, sollten es Linux genannt werden, den von seinem Entwickler gewählten Namen.

    Wenn das Gesamtsystem „Linux“ genannt wird, wird als Konsequenz das Gesamtsystem mit demselben Namen wie der Betriebssystemkern genannt. Dies bewirkt vielerlei Verwirrung, weil nur Experten sagen können, ob eine Aussage über den Systemkern oder das Gesamtsystem gemacht wurde. Indem das Gesamtsystem GNU/Linux und der Systemkern Linux genannt wird, vermeidet man die Mehrdeutigkeit.
Wäre Linux genau so erfolgreich gewesen, wenn es kein GNU gegeben hätte? (#linuxalone)
    In dieser alternativen Welt würde es heute so etwas wie das GNU/Linux-System nicht geben, wahrscheinlich überhaupt kein freies Betriebssystem. Niemand versuchte in den Achtzigern außer dem GNU-Projekt und (später) der CSRG aus Berkeley, die insbesondere vom GNU-Projekt gebeten wurden, ihren Quellcode frei zu geben, ein freies Betriebssystem zu entwickeln.

    Linus Torvalds wurde 1990 teilweise durch einen Vortrag über GNU in Finnland beeinflusst. Es ist möglich, dass er auch ohne diesen Einfluss einen unixoiden Betriebssystemkern geschrieben hätte, aber wäre wahrscheinlich keine Freie Software geworden. Linux wurde, als Linus es erneut unter der GNU GPL freigab, 1992 frei (siehe Versionshinweise für Version 0.12).

    Selbst wenn Torvalds Linux unter irgendeiner anderen freien Softwarelizenz freigegeben hätte, ein freier Systemkern allein hätte in der Welt nicht viel bewegt. Die Bedeutung von Linux kam davon, in einem größeren Rahmen, einem komplett freien Betriebssystem zu passen: GNU/Linux.
Wäre es nicht besser für die Gemeinschaft, wenn man die Menschen mit dieser Aufforderung nicht entzweit? (#divide)
    Indem wir darum bitten, GNU/Linux zu sagen, spalten wir niemanden. Wir bitten darum, dem GNU-Projekt Anerkennung für das GNU-Betriebssystem zu schenken. Dies kritisiert oder verdrängt niemanden.

    Es gibt jedoch Leute, die das nicht mögen. Manchmal bleiben sie uns eine Antwort schuldig. Gelegentlich sind sie so unhöflich, dass man sich fragt, ob sie absichtlich versuchen, uns durch mit Schweigen unter Druck zu setzen. Es bringt uns nicht zum Schweigen, aber tendiert dazu, die Gemeinschaft zu spalten; deswegen hoffen wir, dass Sie sie überzeugen können aufzuhören.

    Aber das ist nur eine sekundäre Ursache der Spaltung in unserer Gemeinschaft. Die größte Spaltung der Gemeinschaft gibt es zwischen Menschen, die Freie Software als eine soziale und ethische Frage zu schätzen wissen und proprietäre Software als soziales Problem verstehen (Unterstützer der Freie-Software-Bewegung) und diejenigen, die nur praktischen Nutzen anführen und Freie Software nur als effizientes Entwicklungsmodell präsentieren (Open-Source-Bewegung).

    Diese Meinungsverschiedenheit ist nicht nur eine Namensfrage ‑ es ist eine Frage unterschiedlicher Grundwerte. Es ist wichtig für die Gemeinschaft, diese Meinungsverschiedenheit zu erkennen und darüber nachzudenken. Die Bezeichnungen Freie Software und Open Source sind die Banner der beiden Positionen. Siehe Warum Open Source das Ziel von Freie Software verfehlt.

    Die Uneinigkeit über Werte deckt sich zum Teil mit dem Maß an Aufmerksamkeit, die man der Rolle des GNU-Projekt in unserer Gemeinschaft schenkt. Menschen, die Freiheit schätzen, nennen das System eher GNU/Linux, und Menschen, die lernen, dass das System GNU/Linux ist, beachten eher unsere philosophischen Argumente für Freiheit und Gemeinschaft (weshalb die Wahl des Systemnamens für die Gesellschaft einen großen Unterschied macht). Allerdings würde die Uneinigkeit wahrscheinlich auch bestehen, wenn jeder den eigentlichen Ursprung des Systems und richtigen Namen kennen würde, weil das ein echter Streitpunkt ist. Er kann nur verschwinden, wenn wir die Freiheit schätzen, entweder jeden überzeugen (was nicht einfach sein wird) oder vollständig besiegt werden (hoffentlich nicht).
Unterstützt das GNU-Projekt nicht das individuelle Recht auf Redefreiheit, das System durch einen beliebigen Namen zu benennen, den Einzelne wählen? (#freespeech)
    Ja, in der Tat glauben wir, dass man ein Recht auf Redefreiheit hat, dem Betriebssystem jeden Namen zu geben, den man möchte. Wir bitten es GNU/Linux zu nennen, um dem GNU-Projekt gerecht zu werden, die Werte der Freiheit zu fördern, für die GNU steht und andere zu informieren, dass diese Werte das System ins Leben gerufen haben. 
Da jedem die Rolle von GNU bei der Entwicklung des Systems bekannt ist, ist die Erwähnung von ‚GNU/‘ im Namen nicht selbstverständlich? (#everyoneknows)
    Die Erfahrung zeigt, dass Nutzer des Systems und die Rechner-nutzende Öffentlichkeit im Allgemeinen oft nichts über das GNU-System wissen. Die meisten Artikel über das System erwähnen den Namen GNU oder die Ideale, für die GNU steht, nicht. GNU-Nutzer, die noch nie von GNU gehört haben gibt weitere Auskunft.

    Die Leute, die das sagen, sind wahrscheinlich Geeks, die an die Geeks denken, die sie kennen. Geeks wissen oft über GNU Bescheid, aber viele haben eine völlig falsche Vorstellung davon, was GNU ist. Beispielsweise denken viele, es sei eine Sammlung von Hilfsprogrammen oder ein Projekt zur Entwicklung von Hilfsprogrammen.

    Der typische Wortlaut dieser Frage veranschaulicht ein anderes weit verbreitetes Missverständnis. Von GNUs Rolle bei der Entwicklung von irgendwas zu sprechen setzt voraus, dass GNU eine Gruppe von Personen wäre. GNU ist ein Betriebssystem. Es wäre sinnvoll, über die Rolle des GNU-Projekt in dieser oder einer anderen Aktivität zu sprechen, nicht jedoch von die von GNU zu sprechen.
Da die Rolle von GNU in diesem System bekannt ist, warum ist es wichtig, welcher Name benutzt wird? (#everyoneknows2)
    Wenn Worte kein Wissen widerspiegeln, sollte man andere nicht unterrichtet. Die meisten Menschen, die vom GNU/Linux-System gehört haben, denken es sei „Linux“, wurde von Linus Torvalds gestartet und sei offener Quellcode ‚Open Source‘. Wenn Sie es ihnen nicht erklären, wer dann? 
Ist GNU/Linux mit „Linux“ abzukürzen nicht genauso wie Microsoft Windows mit Windows abzukürzen? (#windows)
    Es ist sinnvoll, einen häufig verwendeten Namen abzukürzen, aber nicht, wenn die Abkürzung irreführend ist.

    Fast jeder in den entwickelten Ländern weiß wirklich, dass das Windows-System von Microsoft erstellt wurde. Die Abkürzung von Microsoft Windows mit Windows führt also niemanden hinsichtlich Natur und Ursprungs in die Irre. GNU/Linux aber mit „Linux“ abzukürzen, vermittelt eine falsche Vorstellung davon, wo das System her kommt.

    Die Frage selbst ist irreführend, weil GNU und Microsoft nicht dasselbe ist. Microsoft ist ein Unternehmen, GNU ein Betriebssystem.
Ist GNU keine Sammlung von Dienstprogrammen zur Programmierung, die in Linux enthalten ist? (#tools)
    Menschen, die„Linux für ein vollständiges Betriebssystem betrachten, bekommen häufig, wenn sie überhaupt von GNU erfahren, eine falsche Vorstellung von dem, was GNU ist. Sie denken vielleicht, GNU wäre der Name einer Sammlung von Programmen ‑ oft sagen sie Programmierwerkzeuge, da einige unserer Programmierwerkzeuge eigenständig populär geworden sind. Die Vorstellung, dass GNU der Name eines Betriebssystems ist, ist schwer in einen konzeptionellen Rahmen einzuordnen, in dem das Betriebssystem mit „Linux“ bezeichnet wird.

    Das GNU-Projekt wurde nach dem GNU-Betriebssystem benannt ‑ das Projekt ist, das GNU-System zu entwickeln (siehe Neue Unix-Implementierung: Ursprüngliche Ankündigung [des GNU-Projekts] (von 1983).

    Wir entwickelten Programme wie GCC, GNU Emacs, GAS, GLIBC, BASH usw., weil wir sie für das GNU-Betriebssystem brauchten. GCC, die GNU Compiler Collection, ist der Kompiler, den wir für das GNU-Betriebssystem geschrieben haben. Wir, die vielen Menschen, die am GNU-Projekt arbeiten, entwickelten auch Ghostscript, GNUCash, GNU Chess und GNOME für das GNU-System.
Was ist der Unterschied zwischen einem Betriebssystem und einem Betriebssystemkern ‚Kernel‘? (#osvskernel)
    Ein Betriebssystem, wie wir den Begriff verwenden, meint eine Sammlung von Programmen, die ausreicht, den Rechner für verschiedenste Aufgaben zu benutzen. Ein universelles Betriebssystem sollte, um vollständig zu sein, alle Aufgaben handhaben können, die viele Benutzer durchführen wollen.

    Der Betriebssystemkern ist eines der Programme in einem Betriebssystem ‑ das Programm, das den anderen ausgeführten Programmen die Systemressourcen zuweist. Der Betriebssystemkern kümmert sich auch um das Starten und Stoppen anderer Programme.

    Um die Dinge zu verwirren, verwenden einige Leute die Bezeichnung „Betriebssystem“ und meinen eigentlich den Betriebssystemkern. Die Verwendung beider Begriffe reichen viele Jahre zurück. Die Verwendung von „Betriebssystem“ für den Betriebssystemkern findet sich in vielen Lehrbüchern über den Systementwurf und geht bis in die Achtziger zurück. Zur gleichen Zeit wurde in den Achtzigern das Unix-Betriebssystem verstanden, alle Systemprogramme zu enthalten, und Berkeleys Unix-Version enthielt sogar Spiele. Da GNU ein unixoides Betriebssystem werden sollte, verwendeten wir den Begriff Betriebssystem auf die gleiche Weise.

    Meistens, wenn Menschen vom „Linux-Betriebssystem“ sprechen, verwenden sie Betriebssystem in dem Sinne wie wir: die gesamte Sammlung von Programmen. Wenn Sie sich darauf beziehen, nennen Sie es bitte GNU/Linux. Ist nur der Betriebssystemkern gemeint, ist Linux der richtige Name dafür, aber bitte auch Betriebssystemkern, um Unklarheiten zu vermeiden, welcher Teil der Software gemeint ist.

    Wenn Sie einen anderen Begriff wie Systemdistribution anstelle von Betriebssystem für die gesamte Programmsammlung verwenden möchten, ist das schön. Dann würden Sie über GNU/Linux-Distributionen sprechen.
Der Betriebssystemkern eines Systems ist wie das Fundament eines Hauses. Wie kann ein Haus fast komplett sein, wenn es kein Fundament hat? (#house)
    Ein Betriebssystemkern ist nicht ganz wie das Fundament eines Hauses, weil ein Betriebssystem aufzubauen nicht ganz wie das Aufbauen eines Hauses ist.

    Ein Haus wird aus vielen kleinen Bauteilen errichtet, die vor Ort zugeschnitten und zusammengefügt werden. Sie müssen gemeinsam von unten nach oben gesetzt werden. Wenn somit das Fundament nicht errichtet wurde, ist ein wesentliches Gewerk nicht errichtet worden; alles was man hat ist ein Loch im Boden.

    Im Gegensatz dazu besteht ein Betriebssystem aus komplexen Komponenten, die in beliebiger Reihenfolge entwickelt werden können. Wenn die meisten Komponenten entwickelt wurden, ist die meiste Arbeit erledigt. Das ist viel mehr der Internationale Raumstation ähnlich als einem Haus. Wenn die meisten Raumstationmodule in der Umlaufbahn sind, aber auf ein anderes wichtiges Modul gewartet werden würde, wäre das wie das GNU-System im Jahr 1992.
Ist der Betriebssystemkern nicht das Gehirn des Systems? (#brain)
    Ein Rechnersystem ist nicht so wie ein menschlicher Körper, und kein Teil spielt eine mit der des menschlichen Gehirns vergleichbare Rolle. 
Ist die meiste Arbeit an einem Betriebssystem nicht das Schreiben des Betriebssystemkerns? (#kernelmost)
    Nein, viele Komponenten bedeuten eine Menge Arbeit. 
Wie kann GNU ein Betriebssystem sein, wenn ich so etwas wie ‚GNU‘ überhaupt nicht erhalten und installieren kann? (#notinstallable)
    Viele zusammengestellte und installierbare Varianten von GNU sind verfügbar. Keine davon wird einfach nur ‚GNU‘ genannt, aber GNU ist genau das, was sie im Grunde genommen sind.

    Wir glaubten das GNU-System zusammengestellt zur Installation freigeben zu können, aber dieser Plan wurde von den Ereignissen eingeholt: im Jahr 1992 wurden bereits GNU-Varianten zusammengestellt, die Linux enthielten. Ab 1993 sponserten wir dann einen Versuch, eine bessere und freiere GNU/Linux-Distribution namens Debian GNU/Linux zu erstellen. Der Gründer von Debian hatte sich bereits für diesen Namen entschieden. Wir baten ihn, sie nicht einfach nur ‚GNU‘ zu nennen, denn das sollte der Name einer Systemvariante mit dem GNU Hurd-Systemkern sein ‑ der noch nicht fertig war.

    Der GNU Hurd-Systemkern wurde niemals hinreichend fertiggestellt. Wir empfehlen ihn nur denjenigen, die Interesse an der Arbeit daran haben. So haben wir GNU niemals mit dem GNU Hurd-Systemkern gebündelt. Jedoch bündelte Debian diese Kombination: als Debian GNU/Hurd.

    Derzeit entwickeln wir einen erweiterten, auf Scheme basierten Paketmanager namens Guix und eine vollständige, darauf basierende Systemverteilung namens Guix System Distribution bzw. kurz GuixSD. Dies schließt einen wesentlichen Teil des GNU-Systems neu zu verpacken ein.

    Wir machten niemals den letzten Schritt, GNU unter dem Namen ‚GNU‘ zu verpacken, aber das ändert nichts daran was GNU ist: GNU ist ein Betriebssystem.
Wir benennen das Gesamtsystem nach dem Betriebssystemkern Linux. Ist es nicht normal, ein Betriebssystem nach einem Systemkern zu benennen? (#afterkernel)
    Diese Praxis scheint sehr selten zu sein ‑ außer dem Missbrauch des Namens „Linux“ können wir keine anderen Beispiele finden. Normalerweise wird ein Betriebssystem als ein einheitliches Projekt entwickelt, und die Entwickler wählen einen Namen für das System als Ganzes. Der Systemkern hat gewöhnlich keinen eigenen Namen ‑ stattdessen sagt man der Betriebssystemkern von so-und-so oder der so-und-so-Betriebssystemkern.

    Weil diese beiden Interpretationen synonym benutzt werden, kann der Ausdruck der Linux-Betriebssystemkern leicht im Sinne von der Betriebssystemkern von Linux missverstanden werden und implizieren, dass Linux mehr als ein Betriebssystemkern sein müsse. Man kann diese Möglichkeit des Missverständnisses vermeiden, indem man der Betriebssystemkern, Linux, oder Linux, der Betriebssystemkern, sagt oder schreibt.
Kann ein anderes System „das Gefühl von Linux” vermitteln? (#feel)
    Es gibt so etwas wie das „Gefühl von Linux“ nicht, weil Linux keine Benutzerschnittstellen hat. Wie jeder moderne Systemkern ist Linux eine Basis für ausführbare Programme; Benutzerschnittstellen gehören sonst wo im System. Menschliche Interaktion mit GNU/Linux geschieht immer durch andere Programme, und das „Gefühl“ kommt von ihnen. 
Das Problem mit GNU/Linux ist, dass es zu lang ist. Wie wäre es einen kürzeren Namen zu empfehlen? (#long)
    Eine Zeit lang versuchten wir den Namen LiGNUx, der die Worte GNU und Linux vereint. Die Reaktion war sehr schlecht. GNU/Linux wurde viel besser akzeptiert.

    Der kürzeste legitime Name für dieses System ist GNU, aber wir nennen es aus den nachstehend angegebenen Gründen GNU/Linux.
Wie wäre es mit das System ‚GliNUx‘ zu nennen (statt GNU/Linux)? (#long1)

    Der Name GNU erscheint in ‚GliNUx‘ nicht eindeutig genug, die meisten Menschen würden so nicht bemerken, dass hier ein Zusammenhang besteht. Selbst wenn es in ‚GliNUx‘ großgeschrieben wird, würden die meisten Menschen nicht erkennen, dass ein Verweis auf GNU vorhanden ist.

    Es wäre damit vergleichbar, GNU/Linux zu schreiben, aber GNU/ in Druckform so klein zu setzen, dass die meisten es nicht lesen könnten.
Das Problem mit GNU/Linux ist, dass es zu lang ist. Weshalb sollte ich mir die Mühe machen GNU/Linux zu sagen? (#long)

    Es dauert nur eine Sekunde GNU/ [ˈgnuː slæʃ] zu sagen oder einzutippen. Wenn man das System, das wir entwickelt haben, zu schätzen weiß, kann man sich da nicht eine Sekunde nehmen, um unsere Arbeit anzuerkennen?
Fa­ta­ler­wei­se ist GNU/Linux fünfsilbig. Solch ein langer Begriff wird sich nicht durchsetzen. Sollte man nicht einen kürzeren finden? (#long3)

    Eigentlich besteht GNU/Linux [im Englischen] aus nur vier Silben [ˈgnuː slæʃ ˈliːnʊks]. „Fa­ta­ler­wei­se“ hat fünf Silben, dennoch wird kein Anzeichen des Widerwillens gezeigt, dieses Wort trotzdem zu verwenden.
Da Linux ein sekundärer Beitrag ist, wäre es falsch, das System tatsächlich einfach nur GNU zu nennen? (#justgnu)
    Aufgrund der Tatsachen wäre es nicht falsch, aber nicht die beste Lösung. Aus folgenden Gründen nennen wir das System GNU/Linux und nicht nur GNU:

        Es ist nicht genau GNU ‑ es hat einen anderen Systemkern (nämlich Linux). GNU/Linux von GNU zu unterscheiden ist sinnvoll.
        Es wäre unhöflich darum zu bitten, Linus Torvalds keine Anerkennung zu geben. Er schrieb eine wichtige Systemkomponente. Wir möchten die Einführung und Aufrechterhaltung der Systementwicklung anerkennen, aber das bedeutet nicht, dass wir Linus genauso behandeln sollten wie diejenigen, die das System als „Linux“ bezeichnen, uns behandeln. Wir sind mit seinen politischen Ansichten absolut nicht einverstanden, aber wir gehen mit dieser Meinungsverschiedenheit ehrlich und offen um, anstatt zu versuchen, seinen Beitrag zum System nicht anzuerkennen.
        Da viele das System nur als „Linux“ kennen, können sie einfach nicht erkennen, dass, wenn wir von GNU sprechen, wir vom gleichen System reden. Sagen wir GNU/Linux, können sie einen Zusammenhang dazu herstellen, worüber sie gehört haben.

Für die Nutzung von Linux im Namen eines Produktes würde eine Gebühr entrichtet werden müssen, auch, wenn es GNU/Linux heißt. Ist es falsch, GNU ohne Linux zu verwenden, um die Gebühr zu sparen? (#trademarkfee)
    Es ist nichts falsch daran, das System GNU zu nennen. Im Grunde ist es das. Es ist nett Linus Torvalds auch einen Teil der Anerkennung zukommen zu lassen, aber man ist dazu nicht verpflichtet.

    Wenn man sich auf das System einfach mit GNU beziehen möchte, um die Gebühr für den Namen Linux nicht zahlen zu müssen, werden wir dies nicht kritisieren.
Viele andere Projekte haben zum heutigen System beigetragen: TeX, X11, Apache, Perl und viele weitere Programme. Implizieren die Argumente nicht auch deren Anerkennung (was aber zu einem absurd langen Namen führen würde)? (#many)
    Was wir sagen ist, man sollte dem Hauptentwickler des Systems einen Anteil der Anerkennung geben. Der Hauptentwickler ist das GNU-Projekt, und das System ist grundsätzlich GNU.

    Wenn es sogar noch stärker um Ehre, wem Ehre gebührt geht, könnte man glauben, dass einige sekundäre Mitwirkende auch Anerkennung im Namen des Systems verdienen. Wenn dem so ist, dann liegt es uns fern Einwände dagegen vorzubringen. Wenn Sie glauben, dass X11 Anerkennung im Namen des Systems verdient und es GNU/X11/Linux nennen, bitte sehr. Wenn Sie glauben, dass Perl geradezu nach Erwähnung schreit und es GNU/Linux/Perl schreiben möchten, nur zu.

    Da ein langer Name wie beispielsweise GNU/X11/Apache/Linux/TeX/Perl/Python/FreeCiv absurd wird, muss man an einem gewissen Punkt einen Grenze ziehen und die Namen der vielen anderen sekundären Beiträge weglassen. Es gibt keine eindeutig richtige Grenze, aber, wo auch immer, wir sprechen uns nicht dagegen aus.

    Unterschiedliche Grenzwerte würden zu unterschiedlichen Systemnamen führen. Aber ein Name, der sich nicht im Interesse von Fairness und Anerkennung bei keinem möglichen Grenzwert ergeben kann, ist Linux. Es kann nicht fair sein, die ganze Anerkennung einem sekundären Beitrag (Linux) zu geben, während der Hauptbeitrag (GNU) weggelassen wird.
Zahlreiche andere Projekte haben zum heutigen System beigetragen, aber bestehen nicht auf die Nennung von XYZ/Linux. Warum sollte GNU besonders behandelt werden? (#others)
    Tausende Projekte haben Programme entwickelt, die in heutigen GNU/Linux-Systemen enthalten sind. Alle verdienen Anerkennung für ihre Beiträge, aber sie sind nicht die Hauptentwickler des Systems als Ganzes, sodass sie nicht bitten als solche anerkannt zu werden.

    GNU ist anders, weil es mehr als nur ein beigetragenes Programm ist, mehr als nur eine Sammlung beigetragener Programme. GNU ist der Rahmen, worauf das System aufbaut.
GNU ist nur ein kleiner Anteil des heutigen Systems, also warum sollten wir es erwähnen? (#allsmall)
    Im Jahr 2008 stellten wir fest, dass GNU-Pakete 15 % des offiziellen Projektarchivs (main) der gNewSense GNU/Linux-Distribution ausmachten. Linux machte 1,5 % aus. Folglich würde dasselbe Argument noch viel stärker auf die Benennung von Linux zutreffen.

    GNU ist heutzutage ein kleiner Bruchteil des Systems, und Linux ist ein noch kleinerer. Aber sie sind Kern des Systems; das System wurde durch die Kombination beider geschaffen. Dadurch ist der Name GNU/Linux weiterhin angebracht.
Viele Unternehmen haben zum heutigen System beigetragen. Bedeutet das nicht, es sollte GNU/Red Hat/Novell/Linux genannt werden? (#manycompanies)

    GNU ist nicht mit Red Hat oder Novell vergleichbar. Es ist kein Unternehmen, Organisation oder eine Aktivität. GNU ist ein Betriebssystem (wird vom GNU-Projekt gesprochen, bezieht sich das auf das Projekt, das GNU-System zu entwickeln). Das GNU/Linux-System beruht auf GNU, und darum sollte GNU im Namen erscheinen.

    Ein Großteil des Beitrags dieser Unternehmen zum GNU/Linux-System liegt im Quellcode, den sie zu verschiedenen GNU-Paketen, einschließlich GCC und GNOME, beigetragen haben. GNU/Linux zu sagen, gibt jenen Unternehmen sowie allen anderen GNU-Entwicklern Anerkennung.
Warum GNU/Linux statt ‚GNU Linux‘ schreiben? (#whyslash)
    Nach den Regeln der englischen Sprache wird in der Konstruktion ‚GNU Linux‘ das Wort Linux durch GNU modifiziert. Dies kann entweder GNU-Variante von Linux oder Linux, das ein GNU-Paket ist bedeuten. Keine dieser Bedeutungen passt ansatzweise zur vorhandenen Situation.

    Linux ist kein GNU-Paket. Das heißt, dass es nicht unter der Ägide des GNU-Projekts entwickelt oder speziell zum GNU-Projekt beigesteuert worden ist. Linus Torvalds hat Linux unabhängig als sein eigenes Projekt geschrieben. Deswegen ist die Bedeutung Linux, das ein GNU-Paket ist nicht richtig.

    Wir reden hier nicht von einer eigenständigen GNU-Variante von Linux, dem Betriebssystemkern. Freie GNU/Linux-Distributionen haben eine separate Variante von Linux, seitdem die Standard-Version unfreie Firmware-BLOBs enthält. Wäre Linux Teil des GNU-Projekts, könnte es als ‚GNU Linux‘ betrachtet werden; wir würden es aber nicht so nennen wollen, weil es zu irritierend wäre.

    Wir reden über eine Version von GNU, dem Betriebssystem, bei der sich Linux als Systemkern auszeichnet. Ein Schrägstrich liegt auf der Hand, weil er Verbindung bedeutet (denken Sie an Ein-/Ausgabe). Dieses System ist die Verbindung von GNU und Linux, daher GNU/Linux.

    Es gibt andere Möglichkeiten, um Verbindung auszudrücken. Wenn Sie ein Pluszeichen für eindeutiger halten, verwenden Sie es bitte. Im Französischen ist ein Bindestrich eindeutig: GNU-Linux. Auf Spanisch auch GNU con Linux.
Warum GNU/Linux anstatt Linux/GNU? (#whyorder)

    Es ist richtig und angemessen den Hauptbeitrag zuerst zu erwähnen. Der Beitrag von GNU zum System ist nicht nur größer als und startete vor Linux, tatsächlich haben wir die Aktivität insgesamt erst ins Leben gerufen.

    Darüber hinaus ist Tatsache, dass Linux die unterste Ebene des GNU/Linux-Systems ist, GNU die technisch höheren Ebenen erfüllt.

    Wenn man bevorzugt das System jedoch „Linux/GNU“ zu nennen, ist das viel besser als das, was viele üblicherweise tun, nämlich GNU vollständig weglassen und den Anschein erwecken, das Gesamtsystem sei „Linux“.
Die Entwickler meiner Distribution nennen es „Fubar Linux“, aber das sagt nichts darüber aus, woraus das System besteht. Warum sollten sie es nicht benennen dürfen wie auch immer sie mögen? (#distronames0)
    Ein System „Foobar Linux“ zu benennen impliziert, dass es eine Variante von „Linux“ ist, und so wird es auch verstanden.

    Wenn sie eine GNU/Linux-Distribution ‚Fubar BSD‘ nennen würden, würde man das einen Fehler nennen. „Dieses System ist nicht BSD!“, würde man ihnen sagen. Nun, Linux ist es auch nicht.
Der Name meiner Distribution ist „Fubar Linux“. Wird dadurch nicht ausgedrückt, dass es wirklich Linux ist? (#distronames)

    Es bedeutet, dass diejenigen, die die „Fubar Linux“-Distribution entwickeln, den häufig gemachten Fehler wiederholen. Wir wissen es zu schätzen, dass Distributionen wie Debian, Dragora, Musix, Trisquel und Venenux GNU/Linux als Bestandteil ihres offiziellen Namens übernommen haben und hoffen, sollten Sie bei einer anderen Distributionen involviert sein, dazu zu ermutigen, das gleiche zu tun.
Der offizielle Name der Distribution ist „Fubar Linux“. Ist es nicht falsch, die Distribution alles andere als „Fubar Linux“ zu nennen? (#distronames1)

    Wenn Fehlinformation verbreitet werden, indem man GNU zu „Linux“ ändert und deren Version davon „Fubar Linux“ nennt, wäre es angemessen die Fehlinformation dadurch zu korrigieren, dass man es Fubar GNU/Linux nennt.
Wäre es nicht effektiver, Unternehmen wie Mandrake, Red Hat und IBM darum zu bitten, ihre Distributionen GNU/Linux zu nennen, anstatt Einzelne darum zu bitten? (#companies)
    Es ist keine Frage des einen oder des anderen ‑ wir bitten Unternehmen, Organisationen und Einzelne darum, bei der Verbreitung der Bezeichnung zu helfen. In der Tat wurden diese drei Firmen gefragt. Mandrake sagte, sie würden den Begriff GNU/Linux einige Zeit verwenden, aber IBM und Red Hat waren nicht gewillt zu helfen. Ein leitender Angestellter sagte: „Das ist eine rein kommerzielle Entscheidung; wir erwarten mehr Geld zu verdienen, wenn wir es „Linux“ nennen.“ Mit anderen Worten, dieses Unternehmen interessierte sich nicht dafür, was richtig war.

    Wir können sie nicht dazu bringen, das richtigzustellen, aber wir sind nicht diejenigen, die aufgeben, nur weil der Weg nicht einfach ist. Möglicherweise haben Sie nicht so viel Einfluss wie IBM oder Red Hat, aber Sie können dennoch helfen. Gemeinsam können wir die Situation bis zu dem Punkt ändern, an dem Unternehmen mehr Gewinn machen, indem sie es GNU/Linux nennen.
Wäre es nicht besser, den Namen GNU/Linux für Distributionen aufzuheben, die komplett aus freier Software bestehen? Letzten Endes ist das das Ideal von GNU. (#reserve)
    Die weit verbreitete Praxis, dem GNU/Linux-System unfreie Software hinzuzufügen, ist für unsere Gemeinschaft ein großes Problem. Es lehrt Nutzern, dass unfreie Software in Ordnung und deren Nutzung Teil des Geistes von „Linux“ sei. Viele „Linux“-Benutzergruppen machen es zu einem Teil ihrer Mission, bei der Nutzung unfreier Erweiterungen zu helfen und laden vielleicht sogar Verkäufer ein, um Verkaufstaktiken für sie zu machen. Sie vertreten Ziele wie das Helfen der Benutzer von GNU/Linux (einschließlich der Hilfe, unfreie Anwendungen und Treiber zu benutzen) oder das System sogar populärer zu machen ‑ auf Kosten der Freiheit.

    Die Frage ist, wie man versuchen kann, das zu ändern.

    Da ein Großteil der Gemeinschaft ‑ der GNU bereits mit Linux nutzt ‑ schon nicht erkennt, das es das Salz in der Suppe ist diese verfälschten Varianten mit der Begründung zu verleugnen, sie seien nicht wirklich GNU, würde den Nutzern nicht beibringen die Freiheit mehr zu schätzen. Sie würden die beabsichtigte Botschaft nicht erhalten. Sie würden nur antworten sie hätten niemals gedacht, dass diese Systeme in erster Linie GNU wären.

    Der Weg, diese Nutzer dahin zu führen eine Verbindung mit Freiheit zu sehen, ist genau entgegengesetzt: sie zu informieren, dass all diese Systemversionen Varianten von GNU sind, dass alle auf einem System beruhen, das ausdrücklich im Interesse der Freiheit des Nutzers existiert. Mit diesem Verständnis können sie anfangen die Distributionen zu erkennen, die unfreie Software als pervertierte, verfälschte Varianten von GNU umfassen, anstatt anzunehmen sie seien richtige und angemessene „Linux-Versionen“.

    Es ist sehr nützlich GNU/Linux-Benutzergruppen zu gründen, die das System GNU/Linux nennen und die Ideale des GNU-Projekts als Basis ihrer Aktivitäten übernehmen. Wenn bei der Linux-Benutzergruppe in ihrer Nähe die vorstehend beschriebenen Probleme bestehen, empfehlen wir, sich entweder innerhalb dieser Gruppe für eine Änderung ihrer Ausrichtung (und ihres Namens) einzusetzen oder eine neue Gruppe zu gründen. Die Leute, die sich auf die oberflächlicheren Ziele konzentrieren, haben ein Recht auf ihre Ansichten, aber lassen Sie sich nicht mitreißen!
Warum wird keine GNU-Distribution von Linux [sic] hergestellt und diese dann GNU/Linux genannt? (#gnudist)
    Alle „Linux“-Distributionen sind tatsächlich Versionen des GNU-Systems mit Linux als Betriebssystemkern. Der Zweck des Begriffs GNU/Linux ist es, diesen Punkt zu vermitteln. Eine neue Distribution zu entwickeln und diese allein GNU/Linux zu nennen, würde diesen Punkt schwer verständlich machen, auf den es uns ankommt.

    Bezüglich der Entwicklung einer Distribution von GNU/Linux, haben wir das schon einmal gemacht, als wir die frühe Entwicklung von Debian GNU/Linux finanzierten. Das jetzt erneut zu tun, erscheint nicht nützlich; es wäre viel Arbeit und, sofern die neue Distribution keine wesentlichen praktischen Vorteile gegenüber anderen Distributionen hätte, keinen Zweck dienen.

    Stattdessen helfen wir Entwicklern von 100 % freien GNU/Linux-Distributionen wie gNewSense und Ututo.
Warum heißt es nicht einfach ‚Linux ist der GNU-Betriebssystemkern‘ und eine vorhandene GNU/Linux-Variante wird unter dem Namen GNU freigegeben? (#linuxgnu)
    Es könnte eine gute Idee gewesen sein, Linux als GNU-Betriebssystemkern anzunehmen. Hätten wir damals realisiert wie lange es dauern würde, den GNU Hurd zum Laufen zu bringen, dann hätten wir das tun können (leider ist das nachträgliche Einsicht).

    Wenn wir eine vorhandene Version von GNU/Linux nehmen und als GNU bezeichnen würden, wäre das ein wenig wie eine Version des GNU-Systems herzustellen und als „Linux“ zu bezeichnen. Das war nicht richtig, und wir möchten nicht so handeln.
Hat das GNU-Projekt den Einsatz von Linux in den frühen Tagen verurteilt und sich dagegen ausgesprochen? (#condemn)
    Wir übernahmen Linux nicht als unseren Betriebssystemkern, aber verurteilten Linux nicht oder waren dagegen. Im Jahr 1993 begannen wir, Vorbereitungen zu erörtern, die Entwicklung von Debian GNU/Linux zu sponsern. Wir versuchten auch mit den Leuten zusammenzuarbeiten, die einige GNU-Pakete für den Einsatz mit Linux änderten. Wir wollten ihre Änderungen in den Standardfreigaben aufnehmen, sodass diese GNU-Pakete aus dem Stand heraus in Kombination mit Linux funktionieren würden. Aber die Änderungen waren oft spontan und nicht portierbar; sie mussten noch für eine Installation bereinigt werden.

    Die Leute, die die Änderungen gemacht hatten, zeigten wenig Interesse daran, mit uns zusammenzuarbeiten. Einer von ihnen sagte uns sogar, kein Interesse an der Zusammenarbeit mit dem GNU-Projekt zu haben, da er ein ‚Linux-Benutzer‘ sei. Das kam wie ein Schock, weil die Leute, die GNU-Pakete auf andere Systeme portierten, im Allgemeinen mit uns arbeiten wollten, um ihre Änderungen installiert zu bekommen. Doch diese Leute, die ein System entwickeln, das in erster Linie auf GNU beruhte, waren der erste (und praktisch immer noch der einzige) Personenkreis, der nicht bereit war, mit uns zu arbeiten.

    Es war diese Erfahrung, die uns zum ersten Mal zeigte, dass Leute eine Version des GNU-Systems „Linux“ nannten und dass diese Verwirrung unsere Arbeit behinderte. Darum zu bitten, das System GNU/Linux zu nennen, ist unsere Antwort auf dieses Problem und auf die anderen durch die falsche Bezeichnung „Linux“ verursachten Probleme.
Warum wurde so lange gewartet, bevor darum gebeten wurde, den Namen GNU/Linux zu verwenden? (#wait)

    Haben wir eigentlich nicht. 1994 begannen wir mit Entwicklern und Distributoren darüber unter vier Augen zu reden und führten 1996 eine öffentlichere Kampagne durch. Wir werden solange weitermachen, solange es notwendig ist.
Sollte die GNU/[Name]-Konvention auf alle unter GPL lizenzierten Programme angewendet werden? (#allgpled)
    Wir nennen niemals einzelne Programme GNU/[Name]. Ist ein Programm ein GNU-Paket, können wir es GNU [Name] nennen.

    GNU, das Betriebssystem, ist aus vielen verschiedenen Programmen hergestellt. Einige der Programme in GNU wurden als Teil des GNU-Projekts geschrieben oder ausdrücklich dazu beigetragen; das sind die GNU-Pakete, und wir verwenden in deren Namen häufig GNU.

    Es liegt an den Entwicklern eines Programms, zu entscheiden, ob sie es beitragen und es zu einem GNU-Paket machen wollen. Haben Sie ein Programm entwickelt und möchten daraus ein GNU-Paket machen, schreiben Sie bitte an <gnu@gnu.org>, damit wir es bewerten und entscheiden können, ob wir es wollen.

    Es wäre nicht fair, den Namen GNU auf jedes einzelne Programm zu legen, das unter der GPL freigegeben ist. Wenn Sie ein Programm schreiben und es unter der GPL freigeben, bedeutet das nicht, dass das GNU-Projekt es geschrieben hat oder Sie es für uns geschrieben haben. Beispielsweise ist der Betriebssystemkern, Linux, unter der GNU GPL freigegeben, aber Linus hat ihn nicht als Teil des GNU-Projekts geschrieben ‑ er machte die Arbeit unabhängig. Wenn etwas kein GNU-Paket ist, kann das GNU-Projekt dafür keine Anerkennung bekommen und ein GNU im Namen wäre unangemessen.

    Im Gegensatz dazu verdienen wir durchaus die gesamte Anerkennung für das GNU-Betriebssystem als Ganzes, wenn auch nicht für jedes einzelne Programm darin. Das System existiert aufgrund unserer Entschlossenheit und Beharrlichkeit, beginnend im Jahr 1984, viele Jahre bevor Linux begonnen wurde.

    Das Betriebssystem, in dem Linux populär wurde, war im Wesentlichen das gleiche wie das GNU-Betriebssystem. Es ist nicht ganz das gleiche, weil es einen anderen Betriebssystemkern hatte, aber größtenteils war es das gleiche System. Es war eine Variante von GNU. Es war das GNU/Linux-System.

    Linux wird weiterhin überwiegend in Derivaten dieses Systems eingesetzt werden ‑ in den heutigen Versionen des GNU/Linux-Systems. Was diesen Systemen ihre Identität verleiht, sind GNU und Linux im Mittelpunkt dieser Systeme, nicht vor allem Linux allein.
Da vieles von GNU aus Unix stammt, sollte GNU keine Anerkennung an Unix mithilfe von Unix im Namen geben? (#unix)
    Eigentlich kommt nichts von GNU aus Unix. Unix war (und ist) proprietäre Software, also wäre es illegal gewesen, etwas aus seinem Quellcodes in GNU zu benutzen. Das ist kein Zufall; das ist der Grund, warum wir GNU entwickelten: da man bei der Nutzung von Unix (oder bei einem der anderen damaligen Betriebssysteme) keine Freiheit haben konnte, brauchten wir ein freies System, um es zu ersetzen. Wir konnten keine Programme von Unix kopieren, nicht einmal Teile davon; alles musste neu geschrieben werden.

    Kein Quellcode in GNU kommt aus Unix, aber GNU ist ein Unix-kompatibles System; deswegen kommen viele der Ideen und Spezifikationen GNUs aus Unix. Der Name GNU, was für GNU's Nicht Unix steht, ist eine humorvolle Art der Danksagung an Unix und folgt einer Hackertradition von rekursiven Akronymen, die in den 70ern begannen.

    Das erste derartige rekursive Akronym war TINT (‚TINT Ist Nicht TECO‘). Der Autor von TINT schrieb eine andere Implementierung von TECO (es gab bereits viele für verschiedene Systeme). Aber anstatt es mit einem langweiligen Namen wie etwas-oder-anderes TECO zu bezeichnen, dachte er an einen cleveren amüsanten Namen (genau das, was Hacken bedeutet: spielerische Klugheit).

    Anderen Hackern hatte dieser Name so sehr gefallen, dass wir den Ansatz imitierten. Es wurde zur Tradition, ein von Grund auf neu geschriebenes Progamm, das irgendeinem vorhandenen Programm ähnlich war (nehmen wir an der Name wäre Klever), diesem den Namen eines rekursiven Akronyms zu geben, wie MINK für MINK Ist Nicht Klever. In diesem Geist nannten wir unseren Ersatz für Unix GNU’ Nicht Unix.

    Historisch gesehen wollte AT&T, welche Unix entwickelten, nicht, dass ihnen irgendjemand durch das Verwenden von Unix im Namen eines ähnlichen Systems Anerkennung gab, nicht einmal in einem 99%ig kopierten System von Unix. AT&T drohte tatsächlich jedermann zu verklagen, wer AT&T auf diese Weise Anerkennung zollt. Das ist der Grund, warum jede der verschiedenen modifizierten Versionen von Unix (alle proprietären, wie Unix) einen völlig anderen Namen hatten, der nicht Unix einschloss.
Sollte auch GNU/BSD gesagt werden? (#bsd)
    Wir nennen die BSD-Systeme (FreeBSD usw.) nicht GNU/BSD-Systeme, weil dieser Begriff nicht zur Geschichte der BSD-Systeme passt.

    Das BSD-System wurde in den 80ern von der University of California, Berkeley, als unfreie Software entwickelt und wurde in den frühen 90ern frei. Ein heute existierendes freies Betriebssystem ist nahezu sicher entweder eine Variante des GNU-Systems oder eine Art BSD-System.

    Manchmal fragen Leute, ob auch BSD eine Variante von GNU sei, wie GNU/Linux. Nein, ist es nicht. Die BSD-Entwickler wurden dazu inspiriert, ihren Quellcode als Freie Software am Beispiel des GNU-Projekts herzustellen, und explizite Appelle von GNU-Aktivisten halfen sie davon zu überzeugen zu beginnen, aber der Quellcode hatte nur wenig Gemeinsamkeiten mit GNU.

    BSD-Systeme verwenden heute einige GNU-Pakete, genau wie das GNU-System und seine Varianten einige BSD-Programme verwenden; sie sind jedoch, alles in allem, zwei verschiedene Systeme, die sich getrennt voneinander entwickelten. Die BSD-Entwickler schrieben keinen Betriebssystemkern und fügten ihn dem GNU-System hinzu, daher würde ein Name wie GNU/BSD der Situation nicht gerecht werden.

    Der Zusammenhang zwischen GNU/Linux und GNU ist viel enger, und deshalb auch der Name GNU/Linux angemessen.

    Es gibt eine Version von GNU, die den Betriebssystemkern von NetBSD verwendet. Seine Entwickler nennen sie Debian GNU/NetBSD, aber GNU/KernvonNetBSD wäre zutreffender, da NetBSD ein komplettes System ist, nicht nur der Systemkern. Das ist kein BSD-System, da das meiste des Systems dem GNU/Linux-System gleicht.
Wenn GNU-Dienstprogramme unter Windows installiert werden, bedeutet das ein GNU/Windows-System zu betreiben? (#othersys)
    Nicht in demselben Sinne, den wir unter GNU/Linux verstehen. Die Dienstprogramme von GNU sind nur ein Teil der GNU-Software, die wiederum nur ein Teil des GNU-Systems ist, und darunter würde man immer noch ein anderes, komplettes Betriebssystem haben, das keinen Quellode mit GNU gemein hat. Alles in allem ist das eine ganz andere Situation als bei GNU/Linux. 
Kann Linux nicht ohne GNU verwendet werden? (#justlinux)
    Linux wird von sich selbst oder mit kleinen anderen Programmen in einigen Geräten verwendet. Diese kleinen Softwaresysteme sind vom GNU/Linux-System weit entfernt. Benutzer installieren sie beispielsweise nicht auf PCs und würden sie auch ziemlich enttäuschend finden. Es ist hilfreich zu sagen, dass diese Geräte ausschließlich Linux ausführen, um deutlich zu machen, wie verschieden diese kleinen Plattformen von GNU/Linux sind. 
Wie viel des GNU-Systems ist für das System erforderlich, um GNU/Linux zu sein? (#howmuch)
    ‚Wie viel‘ ist keine sinnvolle Frage, weil das GNU-System keine genaue Grenzen aufweist.

    GNU ist ein von einer Gemeinschaft gepflegtes Betriebssystem. Es umfasst weit mehr als nur die GNU-Softwarepakete (von denen wir eine genaue Aufstellung haben), und ständig werden weitere Pakete hinzugefügt. Trotz dieser Änderungen bleibt es das GNU-System, und das Hinzufügen von Linux führt im Ergebnis zu GNU/Linux. Wenn man einen Teil des GNU-Systems verwendet und einen Teil nicht, gibt es keine aussagekräftige Möglichkeit zu sagen, ‚wie viel‘ man verwendet.

    Betrachtet man auf der Ebene der Pakete, ist Linux ein wesentliches Paket im GNU/Linux-System. Die Aufnahme von einem wesentlichen GNU-Paket ist ausreichend, um unserer Bitte nach gleicher Erwähnung zu rechtfertigen.
Gibt es komplette Linux-Systeme [sic] ohne GNU? (#linuxsyswithoutgnu)
    Es gibt Komplettsysteme, die Linux und nicht GNU enthalten. Android ist ein Beispiel dafür. Aber es ist ein Fehler, sie „Linux“-Systeme zu nennen, genauso wie es ein Fehler ist, GNU ein „Linux“-System zu nennen.

    Android unterscheidet sich vom GNU/Linux-System sehr ‑ weil die beiden sehr wenig Quellcode gemein haben. Tatsächlich ist das einzige, was sie gemein haben, ist Linux.

    Wenn Sie das gesamte GNU/Linux-System „Linux“ nennen, werden Sie es für notwendig erachten, Dinge zu sagen wie: „„Android enthält Linux, aber es nicht Linux, weil es nicht die üblichen Linux [sic]-Bibliotheken und -Dienstprogramme [also das GNU-System] enthält.“

    Android enthält ebenso viel von Linux wie GNU/Linux. Was es nicht enthält, ist das GNU-System. Android ersetzt das stattdessen durch Google-Software, die ganz anders funktioniert. Was Android von GNU/Linux unterscheidet ist das Nichtvorhandensein von GNU.
Ist es richtig ‚mit Linux‘ zu sagen, wenn man sich auf GNU/Linux und Android bezieht? (#usegnulinuxandandroidlinuxsyswithoutgnu)
    Ganz und gar nicht. Diese Verwendung ist so vorbelastet, dass die eigentlich gemeinte Bedeutung nicht verstanden wird.

    Die Öffentlichkeit wird es wohl als sehr sonderbar empfinden von Android als ‚mit Linux‘ zu sprechen. Das ist wie mit jemanden eine Unterhaltung führen und anschließend zu sagen, dass man sich mit den Eingeweiden oder dem Kreislaufsystem dieser Person unterhielt.

    Sollte es sich dabei tatsächlich um GNU/Linux handeln, wird die Öffentlichkeit die Vorstellung von ‚mit Linux‘ ‑ neben dem üblichen Missverständnis hinaus ‑ verstehen: an das Gesamtsystem als „Linux“ denkend.

    Der Gebrauch von Android und GNU/Linux sind völlig verschieden, so unterschiedlich wie das Auto- und Fahrradfahren. Die Tatsache, dass die ersten beiden erstgenannten Linux enthalten, ist für deren Gebrauch irrelevant, ebenso wie die Tatsache, dass sowohl ein Auto und als auch ein Fahrrad eine Metallkonstruktion haben für den Gebrauch jener beiden irrelevant ist. Wenn man über Autos und Fahrräder sprechen mag, würde man nicht von „mit Metallgegenständen mitfahren“ sprechen - es sei denn man spielt mit der Leserschaft und würde „mit Autos und Fahrräder“ sagen. Die einfachste Möglichkeit über GNU/Linux und Android zu sprechen, ist die Verwendung von mit GNU/Linux und Android.
Warum wird das System nicht einfach Linux/GNU genannt und damit Linus Torvalds’ Rolle als Aushängeschild unserer Gemeinschaft gestärkt? (#helplinus)
    Linus Torvalds ist das „Aushängeschild“ (das ist die Wortwahl anderer Menschen, nicht unsere) für seine Ziele, nicht unserer. Sein Ziel ist es, das System populärer zu machen und zu glauben, dass dessen Wert für die Gesellschaft lediglich in den praktischen Vorteilen liegt, die es bietet: seiner Leistung, Verlässlichkeit und einfacher Verfügbarkeit. Er hat die Freiheit zur Zusammenarbeit nie als ethischen Grundsatz befürwortet, weshalb die Öffentlichkeit den Namen „Linux“ nicht mit diesem Grundsatz verbindet.

    Linus bekundet seine Uneinigkeit mit den Idealen der Freie-Software-Bewegung öffentlich. Er entwickelte für viele Jahre mit seiner Arbeit unfreie Software (und sagte das auch vor einem großen Publikum bei einer „Linux“ World-Messe) und lud öffentlich Mitentwickler von Linux, dem Systemkern, ein, Software zu verwenden, um darauf mit ihm zu arbeiten. Er geht sogar noch weiter und weist Leute zurecht, die vorschlagen, dass Ingenieure und Wissenschaftler soziale Konsequenzen unserer technischen Arbeit berücksichtigen sollten ‑ weist die Lektionen zurück, die die Gesellschaft aus der Entwicklung der Atombombe lernte.

    Es ist nichts daran zu beanstanden, aus Beweggründen des Lernens und aus Spaß ein freies Programm zu schreiben; der Systemkern, den Linus aus diesen Gründen geschrieben hat, war ein wichtiger Beitrag zu unserer Gemeinschaft. Aber diese Beweggründe sind nicht der Grund, warum das komplette freie System, GNU/Linux, existiert, und werden unsere Freiheit in der Zukunft nicht sichern. Die Öffentlichkeit muss das wissen. Linus hat das Recht, für seine Ansichten zu werben; jedoch sollten die Menschen wissen, dass das besagte Betriebssystem von Idealen der Freiheit stammt, nicht von seinen Ansichten.
Ist es nicht falsch, das Werk von Linus Torvalds als GNU zu bezeichnen? (#claimlinux)
    Es wäre falsch, also machen wir das nicht. Die Arbeit von Torvalds ist Linux, der Betriebssystemkern; wir sind darauf bedacht, diese Arbeit nicht dem GNU-Projekt zuzuschreiben oder es als ‚GNU‘ zu bezeichnen. Wenn wir über das Gesamtsystems sprechen, gibt ihm der Name GNU/Linux einen Teil der Anerkennung. 
Ist Linus Torvalds damit einverstanden, dass Linux nur der Betriebssystemkern ist? (#linusagreed)

    Anfangs erkannte er das an. Der erste Versionshinweis von Linux besagt: „Die meisten der mit Linux verwendeten Dienstprogramme sind GNU-Software und stehen unter dem GNU Copyleft. Diese Dienstprogramme sind nicht in der Distribution ‑ fragt mich (oder GNU) für weitere Informationen.“
Warum wurde der GNU Hurd-Systemkern nie fertiggestellt, das GNU-System als Ganzes freigegeben und die Frage vergessen, was GNU/Linux zu nennen sei? (#finishhurd)
    Wir möchten für das GNU-Betriebssystem anerkannt werden, ganz gleich welcher Kern damit genutzt wird.

    GNU Hurd gut genug funktionierend zu machen um mit Linux zu konkurrieren, wäre eine große Aufgabenstellung und nicht unbedingt notwendig. Das einzige, was ethisch falsch mit Linux als Systemkern ist, ist die Aufnahme von Firmware-BLOBs! Die beste Lösung für dieses Problem ist die Entwicklung eines freien Ersatzes für die BLOBs.
Der Kampf ist bereits verloren ‑ die Gesellschaft hat ihre Entscheidung getroffen und wir können es nicht ändern, warum also noch darüber nachdenken? (#lost)
    Das ist kein Kampf, es ist eine Kampagne der Bildung. Wie man das System nennt ist keine in einem Augenblick von der Gesellschaft vorgenomme einzelne Entscheidung: jede Person, jede Organisation kann entscheiden, welcher Name benutzt wird. Man kann anderen nicht vorschreiben GNU/Linux zu sagen, aber man kann für sich selbst beschließen, das System GNU/Linux zu nennen ‑ und dadurch helfen, andere zu informieren. 
Die Gesellschaft hat ihre Entscheidung getroffen und wir können es nicht ändern, also was nützt es GNU/Linux zu sagen? (#whatgood)
    Das ist keine Alles-oder-Nichts-Situation: richtige und falsche Bilder werden mehr oder weniger von verschiedenen Leuten verbreitet. Wenn Sie das System GNU/Linux nennen, helfen Sie anderen, die wahre Geschichte des Systems, den Ursprung und den Grund dafür zu erfahren. Sie können die unzutreffende Bezeichnung nicht überall selbst richtig stellen, nicht mehr als wir es können, aber Sie können helfen. Wenn nur einige hundert Menschen sehen, wie Sie den Begriff GNU/Linux verwenden, werden eine beträchtliche Anzahl von Menschen mit sehr wenig Aufwand informiert. Und einige werden die Richtigstellung an andere weitergeben. 
Wäre es nicht besser, das System „Linux“ zu nennen und den wahren Ursprung in einer zehnminütigen Erklärung zu lehren? (#explain)
    Wenn Sie uns helfen, indem Sie anderen auf diese Weise erklären, wissen wir Ihr Engagement zu schätzen, aber das ist nicht die beste Methode. Es ist nicht so wirkungsvoll wie das System GNU/Linux zu nennen, und nutzt Ihre Zeit ineffektiv.

    Es ist ineffektiv, weil es vielleicht keine Wirkung erzielt und sicherlich nicht weitergegeben wird. Einige, die Ihre Erklärung hören, werden dieser Aufmerksamkeit schenken und können ein richtiges Bild des Ursprungs des Systems erfahren. Aber sie werden die Erklärung anderen kaum wiederholen können, wann auch immer es um das System geht. Man wird es wahrscheinlich einfach „Linux“ nennen. Ohne es besonders zu beabsichtigen, helfen sie, ein falsches Bild zu verbreiten.

    Es ist ineffizient, weil es viel mehr Zeit in Anspruch nimmt. GNU/Linux zu sagen und zu schreiben beansprucht täglich nur einige Sekunden, keine Minuten, um so weit mehr Menschen zu erreichen. Zwischen Linux und GNU/Linux zu unterscheiden, wenn Sie schreiben und reden, ist bei weitem der einfachste Weg, dem GNU-Projekt effektiv zu helfen.
Einige Leute lachen einen aus, wenn man sie bittet, das System GNU/Linux zu nennen. Warum unterwerfen Sie sich [RMS] dieser Behandlung? (#treatment)
    Das System „Linux“ zu nennen vermittelt tendenziell ein falsches Bild der Geschichte und den Grund für die Existenz des Systems. Leute, die über unsere Bitte womöglich lachen, haben sich dieses falsche Bild angeeignet ‑ sie denken, unsere Arbeit wurde von Linus gemacht, also lachen sie, wenn wir um Anerkennung bitten. Hätten sie die Wahrheit gewusst, würden sie wahrscheinlich nicht lachen.

    Warum nehmen wir das Risiko einer Bitte in Kauf, die manchmal dazu führt, uns zu verspotten? Weil sich oft nützliche Resultate ergeben, die dem GNU-Projekt helfen. Wir gehen das Risiko des unverdienten Missbrauchs ein, um unsere Ziele zu erreichen.

    Wenn Sie eine solche ironischerweise unfaire Situation aufkommen sehen, bitte schauen Sie nicht tatenlos zu. Erzählen Sie den Lachenden die tatsächliche Geschichte. Wenn sie sehen, warum die Bitte gerechtfertigt ist, werden diejenigen, die auch nur etwas Verstand haben, aufhören zu lachen.
Einige missbilligen einen, wenn man sie darum bittet, das System GNU/Linux zu nennen. Verliert man nicht, indem man es sich mit ihnen verscherzt? (#alienate)
    Nicht sehr. Leute, die unsere Rolle bei der Systementwickelung nicht zu schätzen wissen, werden kaum wesentliche Versuche machen uns zu helfen. Wenn sie sich wirklich mit etwas beschäftigen das unsere Ziele vorbringt, wie Freie Software freigeben, ist es wahrscheinlich aus anderen nicht miteinander verwandten Gründen, nicht etwa weil wir sie darum baten. Unterdessen unterminieren sie unsere Möglichkeit, die Hilfe von anderen zu gewinnen, indem sie anderen beibringen, unsere Arbeit jemand anderem zuzuschreiben,

    Es macht keinen Sinn, sich Gedanken über Leute zu machen, mit denen man es sich verscherzt hat, die zumeist bereits unkooperativ sind, und aussichtslos ist, ein schwerwiegendes Problem zu korrigieren, um nicht die Leute zu entrüsten, die es bewahren. Daher werden wir auch weiterhin versuchen, die falsche Bezeichnung richtigzustellen.
Was auch immer beigetragen wurde, ist es legitim, das Betriebssystem umzubenennen? (#rename)
    Wir benennen nichts um. Wir haben dieses System GNU genannt, seitdem wir es im Jahr 1983 ankündigten. Die Leute, die versuchten es in „Linux“ umzubenennen, hätten das nicht tun sollen.
Ist es nicht falsch, Menschen zu zwingen, das System GNU/Linux zu nennen? (#force)
    Es wäre falsch, sie zu zwingen, und wir versuchen es nicht. Wir nennen das System GNU/Linux und bitten Sie, es auch zu tun. 
Warum werden Personen nicht verklagt, die das Gesamtsystem „Linux“ nennen? (#whynotsue)
    Es gibt keine rechtliche Handhabe zur Klageerhebung, aber da wir an die Redefreiheit glauben, würden wir das auch gar nicht wollen. Wir bitten darum, das System GNU/Linux zu nennen, denn genau das ist das Richtige, das zu tun ist. 
Sollte nicht etwas in die GNU GPL aufgenommen werden, um zu verlangen, das System GNU zu nennen? (#require)
    Der Zweck der GNU GPL ist die Freiheit der Nutzer vor diejenigen zu schützen, die proprietäre Versionen aus freier Software machen würden. Es stimmt zwar, dass diejenigen, die das System „Linux“ nennen, oftmals Sachen machen, die die Freiheit des Nutzers einschränken, wie unfreie Software mit dem GNU/Linux-System bündeln oder sogar dafür entwickeln, der bloße Akt hingegen, das System „Linux“ zu nennen, spricht den Nutzern an sich nicht ihre Freiheit ab. Welchen Namen man für das System verwenden kann, scheint eine Beschränkung der GPL unpassend zu sein. 
Seit der ablehnenden Einwände gegen die Werbeerfordernis der ursprünglichen BSD-Lizenz, den Namen der University of California anerkennend zu benennen, ist es nicht heuchlerisch den Verdienst des Projekts ‚GNU‘ einzufordern? (#BSDlicense)
    Es wäre heuchlerisch, den Namen GNU/Linux mittels einer Lizenz vorzuschreiben ‑ und wir tun es nicht. Wir bitten Sie nur darum, uns den Verdienst zuschreiben, den wir verdienen.

    Bitte beachten Sie, dass es mindestens zwei verschiedene BSD-Lizenzen gibt. Aus Gründen der Klarheit verwenden Sie bitte nicht den Begriff BSD-Lizenz ohne anzugeben, welche genau gemeint ist.
Da ihr versäumt habt etwas in die GNU GPL aufzunehmen, um zu verlangen, dass das System GNU genannt wird, verdient ihr was geschah. Warum beklagt ihr euch jetzt? (#deserve)
    Die Frage setzt eine eher umstrittene allgemeine ethische Prämisse voraus: dass, wenn man Sie nicht dazu zwingt einen anständig zu behandeln, Sie berechtigt sind, einen so viel wie Sie mögen auszunutzen. Mit anderen Worten, es wird davon ausgegangen, dass Macht vor Recht geht.

    Wir hoffen, dass Sie mit dieser Prämisse ‑ genauso wie wir ‑ nicht einverstanden sind.
Wäre es nicht besser dem nicht zu widersprechen, was so viele glauben? (#contradict)
    Wir denken nicht, dass wir uns einer großen Anzahl von Menschen anschließen sollten, denn sie wurden in die Irre geführt. Wir hoffen, auch Sie werden sich dafür entscheiden, dass Wahrheit wichtig ist.

    Wir hätten nie ein freies Betriebssystem entwickeln können, ohne zunächst die Überzeugung der meisten Menschen zu verleugnen, dass proprietäre Software legitim und hinnehmbar wäre.
Da es viele „Linux“ nennen, macht es das nicht richtig? (#somanyright)
    Wir denken nicht, dass die Popularität eines Fehlers diesen zur Wahrheit führt. 
Ist es nicht besser das System nach den Namen zu benennen, den die meisten Nutzer bereits kennen? (#knownname)
    Nutzer können durchaus dazulernen. Da GNU/Linux auch das Wort Linux enthält, ist erkennbar worüber man spricht. Wenn man einmal eine Weile GNU (oft fälschlicherweise als „Linux“ bezeichnet) voranstellt, werden sie alle verstehen. 
Viele interessieren sich dafür was praktisch ist oder wer gewinnt, nicht ob Thesen richtig oder falsch sind. Könnte man nicht mehr von deren Unterstützung durch einen anderen Weg bekommen? (#winning)
    Sich nur dafür zu interessieren was praktisch ist oder wer gewinnt, ist eine amoralische Einstellung zum Leben. Unfreie Software ist ein Beispiel dieser amoralischen Anschauung und zieht daraus einen großen Gewinn. Deshalb wäre es langfristig kontraproduktiv, uns dieser Anschauung zu unterwerfen. Wir werden weiterhin von richtig und falsch sprechen.

    Wir hoffen, dass Sie einer derjenigen sind, für die richtig und falsch eine Rolle spielen.

https://www.gnu.org/education/education.html
Freie Software und Bildung
Wie bezieht sich Freie Software auf Bildung?

Software-Freiheit spielt im Bildungsbereich eine grundlegende Rolle. Bildungseinrichtungen aller Bereiche sollten Freie Software nutzen und lehren, weil es die einzige Software ist, die ihnen ihre maßgeblichen Aufgaben ermöglicht zu erledigen: Menschliches Wissen zu vermitteln und Schülerinnen und Schüler darauf vorbereiten, gute Mitglieder ihrer Gesellschaft zu sein. Der Quellcode und die Methoden für Freie Software sind Teil menschlichen Wissens. Im Gegensatz dazu ist proprietäre Software geheimes, beschränktes Wissen, was das Gegenteil der Aufgabe von Bildungseinrichtungen ist. Freie Software fördert Bildung, proprietäre Software verbietet Bildung.

Freie Software ist nicht nur eine technische, sondern eine ethische, soziale und politische Frage. Es ist eine Frage der Menschenrechte, die Softwarenutzer haben sollten. Freiheit und Zusammenarbeit sind unerlässliche Werte von Freie Software. Das GNU-System realisiert diese Werte und das Prinzip des Teilens, da gemeinsame Nutzung gut und nützlich für den menschlichen Fortschritt ist.

Weitere Informationen unter Freie Software. Was ist das? und Warum Software frei sein sollte.


https://www.gnu.org/education/edu-software-gcompris.html
GCompris
Beschreibung
GCompris-Oberfläche mit verschiedenen Aktivitäten

GCompris ist eine betriebssystemunabhängige und komplette Lernsoftware für Kinder im Alter von 2 bis 10 Jahren und Teil des GNU-Projekts. Es umfasst auf unterhaltsame Weise mehr als 140 Leistungsspektren, die jüngeren Kindern helfen, Fertigkeiten wie die Erkennung von Zeichen und Zahlen, die Bedienung von Maus und Tastatur, einfache Algebra, das Lesen der Uhrzeit mit einer analogen Uhr, Vektorzeichnungen, spielerisches Sprachenlernen und vieles mehr zu erlernen. Das Programm enthält eine einfache Textverarbeitung, um Dokumente mit einfachen Formatierungen zu erstellen. Ein weiteres Merkmal sind Animationen, die als einfache und wirkungsvolle Methode eingesetzt werden können, um unterstützend Geschichten zu erzählen, damit die Kommunikation der Kinder untereinander verbessert wird und ihnen hilft, sich auszudrücken.

GCompris umfasst mehrere Aktivitäten, gruppiert auf einer gelben Symbolleiste an der linken Bildschirmseite, aus der das Kind wählen kann, sobald das Programm gestartet ist. Eine solche Gestaltung macht es leicht, neue Aktivitäten hinzuzufügen oder das Programm benutzerdefiniert anzupassen. Das Programm selbst und alle Aktivitäten sind in vielen verschiedenen Sprachen verfügbar.

Weitere Informationen finden Sie im Freie-Software-Verzeichnis der FSF und dem offiziellen Webauftritt von GCompris.
Wer nutzt GCompris und wie

GCompris’ aktivitätsbasierte Gestaltung ist sehr einfach an besondere Umgebungen anpassbar. Ein Beispiel für die innovative Nutzung des Programms ist das Insight-Projekt von Kerala, Indien. Das Projekt soll die Vorteile von freier Software unterschiedlich behinderter Menschen im Land näher bringen. Sie fanden, dass GCompris ein mächtiges Hilfsmittel ist, um die kommunikativen und motorischen Fähigkeiten der geistig behinderten Menschen wie Kinder mit Autismus zu verbessern. Das Projekt nutzt das Programm und passte es den besonderen Bedürfnissen seiner Zielgruppe an.

Das Insight-Team implementierte für Lehrer ein Ausbildungsmodul mit einer Anleitung, wie verschiedene Aktivitäten von GCompris beim Arbeiten mit Kindern mit besonderen Bedürfnissen helfen können, Fähigkeiten wie Auge-Hand-Koordination, Gedächtnis, Hören und die Verbesserung der kindlichen Aufmerksamkeitsspanne. Das Modul spricht verschiedene Bildungsniveaus von Vorschule bis zur Grundschule an. Ein kleines Handbuch richtet sich an Eltern und Sonderschullehrkräfte bzw. ErzieherInnen, um ihnen die Nutzung der Software zu erklären, um die Fertigkeiten der Kinder zu verbessern.

GCompris wird auch verwendet, um älteren Kinder zu helfen, die Beziehung zwischen Zahlen zu verstehen, Grundrechenarten zu erlernen, analytisches Denken zu trainieren und kommunikative Fähigkeiten wie Rechtschreibung, Lesen und Schreiben zu verbessern.
Warum

Lehrer berichten, dass es für sie äußerst leicht ist, GCompris in ihrem Lehrplan einzusetzen, da es intuitiv bedienbar und Kindern Spaß macht. Das Programm ist auch eine hervorragende Quelle für geistig behinderte Kinder und Erwachsene.

GCompris ist zu einer wichtigen Ressource zur Beschleunigung des kindlichen Lernprozesses im Zusammenhang mit Entwicklungsländern wie Indien geworden, wo die einzige Möglichkeit, Kinder an den Umgang mit Rechnern zu gewöhnen, die Schulzeit ist. In der Schule werden die Rechner oft gemeinsam genutzt und Kinder können nur für eine begrenzte Zeit einzeln darauf zugreifen. GCompris ist einfach und intuitiv zu bedienen und in diesem Umfeld besonders nützlich, weil praktisch keine Zeit damit verbracht wird zu verstehen, wie das Programm funktioniert. Mit GCompris entwickeln Kinder schnell die benötigten motorischen Fähigkeiten, um einen Rechner zu benutzen.
Ergebnisse

GCompris respektiert die grundlegenden Freiheiten der Nutzer; dies ermöglichte es den Insight-Entwicklern und Fachleuten, die Software an die Bedürfnisse der Kinder anzupassen, neue Aktivitäten zu erstellen und eine innovative Programmnutzung vorzuschlagen, um autistischen Kindern und deren Eltern zu helfen. Dem Insight-Team steht auch frei, modifizierte Kopien an LehrerInnen und Eltern zu verteilen, um das Programm zu Hause ohne Einschränkungen nutzen zu können. Modifizierte Versionen haben sich bereits bei der Verbesserung des akademischen und funktionellen Talents geistig behinderter Kinder bewährt.

